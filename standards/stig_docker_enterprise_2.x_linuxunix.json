{
  "name": "stig_docker_enterprise_2.x_linuxunix",
  "date": "2019-09-13",
  "description": "This Security Technical Implementation Guide is published as a tool to improve the security of Department of Defense (DoD) information systems. The requirements are derived from the National Institute of Standards and Technology (NIST) 800-53 and related documents. Comments or proposed revisions to this document should be sent via email to the following address: disa.stig_spt@mail.mil.",
  "title": "Docker Enterprise 2.x Linux/UNIX Security Technical Implementation Guide",
  "version": "1",
  "item_syntax": "^\\w-\\d+$",
  "section_separator": null,
  "items": [
    {
      "id": "V-94863",
      "title": "The Docker Enterprise Per User Limit Login Session Control in the Universal Control Plane (UCP) Admin Settings must be set to an organization-defined value for all accounts and/or account types.",
      "description": "The UCP component of Docker Enterprise includes a built-in access authorization mechanism called eNZi which can be integrated with an LDAP server and subsequently configured to limit the number of concurrent sessions to an organization-defined number for all accounts and/or account types. Per-user session control limits are configured with a default of 10. For reference, the per user limit in UCP specifies the maximum number of sessions that any user can have active at any given time. If creating a new session would put a user over this limit then the least recently used session will be deleted. A value of zero disables limiting the number of sessions that users may have. This configuration applies to both the UCP and DTR management consoles.",
      "severity": "low"
    },
    {
      "id": "V-94865",
      "title": "TCP socket binding for all Docker Engine - Enterprise nodes in a Universal Control Plane (UCP) cluster must be disabled.",
      "description": "The UCP component of Docker Enterprise configures and leverages Swarm Mode for node-to-node cluster communication. Swarm Mode is built in to Docker Engine - Enterprise and uses TLS 1.2 at a minimum for encrypting communications. Under the hood, Swarm Mode includes an embedded public key infrastructure (PKI) system. When a UCP cluster is initialized, the first node in the cluster designates itself as a manager node. That node subsequently generates a new root Certificate Authority (CA) along with a key pair, which are used to secure communications with other UCP nodes that join the swarm. One can also specify his/her own externally-generated root CA upon initialization of a UCP cluster. The manager node also generates two tokens to use when joining additional nodes to the cluster: one worker token and one manager token. Each token includes the digest of the root CAâ€™s certificate and a randomly generated secret. When a node joins the cluster, the joining node uses the digest to validate the root CA certificate from the remote manager. The remote manager uses the secret to ensure the joining node is an approved node. Each time a new node joins the cluster, the manager issues a certificate to the node. The certificate contains a randomly generated node ID to identify the node under the certificate common name (CN) and the role under the organizational unit (OU). The node ID serves as the cryptographically secure node identity for the lifetime of the node in the current swarm. In this mutual TLS architecture, all nodes encrypt communications using a minimum of TLS 1.2, thereby satisfying the requirements of this control. This information can also be referenced at https://docs.docker.com/engine/swarm/how-swarm-mode-works/pki/ and https://docs.docker.com/ee/ucp/ucp-architecture/.\n\nBy itself, Docker Engine - Enterprise is configured by default to listen for API requests via a UNIX domain socket (or IPC socket) created at /var/run/docker.sock on supported Linux distributions and via a named pipe at npipe:////./pipe/docker_engine on Windows Server 2016 and newer. Docker Engine - Enterprise can also be configured to listen for API requests via additional socket types, including both TCP and FD (only on supported systemd-based Linux distributions). If configured to listen for API requests via the TCP socket type over TCP port 2376 and with the daemon flags and SSL certificates, then, at a minimum, TLS 1.2 is used for encryption; therefore this control is applicable and is inherently met in this configuration. If configured to listen for API requests via the TCP socket type, but without TLS verification and certifications, then the instance remains vulnerable and is not properly configured to meet the requirements of this control. If configured to listen for API requests via the FD socket type, then this control is not applicable. More information can be found at https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-socket-option. The TCP socket binding should be disabled when running Engine as part of a UCP cluster.\n\nSatisfies: SRG-APP-000014, SRG-APP-000141, SRG-APP-000219, SRG-APP-000383, SRG-APP-000439, SRG-APP-000440, SRG-APP-000441, SRG-APP-000442, SRG-APP-000142",
      "severity": "medium"
    },
    {
      "id": "V-94867",
      "title": "FIPS mode must be enabled on all Docker Engine - Enterprise nodes.",
      "description": "When FIPS mode is enabled on a Docker Engine - Enterprise node, it uses FIPS-validated cryptography to protect the confidentiality of remote access sessions to any bound TCP sockets with TLS enabled and configured. FIPS mode in Docker Engine - Enterprise is automatically enabled when FIPS mode is also enabled on the underlying host operating system.\n\nThis control is only configurable for the Docker Engine - Enterprise component of Docker Enterprise as only the Engine includes FIPS-validated cryptography. Neither Universal Control Plane (UCP) nor Docker Trusted Registry (DTR) include FIPS-validated cryptography at this time. However, both UCP and DTR will include FIPS-validated cryptography in a future release. Therefore, for UCP/DTR this control is applicable but not yet met.\n\nSatisfies: SRG-APP-000015, SRG-APP-000231, SRG-APP-000014, SRG-APP-000570, SRG-APP-000395, SRG-APP-000514, SRG-APP-000416, SRG-APP-000156, SRG-APP-000172, SRG-APP-000179, SRG-APP-000224, SRG-APP-000411, SRG-APP-000412, SRG-APP-000555, SRG-APP-000635",
      "severity": "high"
    },
    {
      "id": "V-94869",
      "title": "The audit log configuration level must be set to request in the Universal Control Plane (UCP) component of Docker Enterprise.",
      "description": "The UCP and Docker Trusted Registry (DTR) components of Docker Enterprise provide audit record generation capabilities. Audit logs capture all HTTP actions for the following endpoints: Kubernetes API, Swarm API and UCP API. The following UCP API endpoints are excluded from audit logging (where \"*\" designates a wildcard of exclusions): \"/_ping\", \"/ca\", \"/auth\", \"/trustedregistryca\", \"/kubeauth\", \"/metrics\", \"/info\", \"/version*\", \"/debug\", \"/openid_keys\", \"/apidocs\", \"kubernetesdocs\" and \"/manage\". Audit log verbosity can be set to one of the following levels: \"none\", \"metadata\", or \"request\". To meet the requirements of this control, the \"request\" verbosity level must be configured in UCP.\n\nThe data captured at each level for UCP and the eNZI authentication and authorization backplane is described below:\n\n\"none\": audit logging is disabled\n\n\"metadata\":\n - method and API endpoint for the request\n - UCP user which made the request\n - response status (success/failure)\n - timestamp of the call\n - object ID of created/updated resource (for create/update calls)\n - license key\n - remote address\n\n\"request\": includes all fields from the \"metadata\" level, as well as the request payload\n\nDTR audits all events associated with repository activities. Events are considered as follows: create, get, delete, update, send, fail, and scan. The following types are associated with the defined audit events: repository, tag, blob, manifest, webhook, uri, promotion, push mirroring, poll mirroring, garbage collector, system.\n\nThe Docker Engine - Enterprise component of Docker Enterprise relies on the underlying host operating system's auditing capabilities. By default, the host OS is not configured to audit Docker Engine - Enterprise.\n\nSatisfies: SRG-APP-000016, SRG-APP-000089, SRG-APP-000515, SRG-APP-000510, SRG-APP-000509, SRG-APP-000508, SRG-APP-000507, SRG-APP-000506, SRG-APP-000505, SRG-APP-000504, SRG-APP-000503, SRG-APP-000502, SRG-APP-000501, SRG-APP-000500, SRG-APP-000499, SRG-APP-000498, SRG-APP-000497, SRG-APP-000496, SRG-APP-000495, SRG-APP-000494, SRG-APP-000493, SRG-APP-000492, SRG-APP-000484, SRG-APP-000447, SRG-APP-000381, SRG-APP-000343, SRG-APP-000101, SRG-APP-000100, SRG-APP-000099, SRG-APP-000098, SRG-APP-000097, SRG-APP-000096, SRG-APP-000095, SRG-APP-000093, SRG-APP-000092, SRG-APP-000091",
      "severity": "medium"
    },
    {
      "id": "V-95111",
      "title": "The host operating systems auditing policies for the Docker Engine - Enterprise component of Docker Enterprise must be set.",
      "description": "The Universal Control Plane (UCP) and Docker Trusted Registry (DTR) components of Docker Enterprise provide audit record generation capabilities. Audit logs capture all HTTP actions for the following endpoints: Kubernetes API, Swarm API and UCP API. The following UCP API endpoints are excluded from audit logging (where \"*\" designates a wildcard of exclusions): \"/_ping\", \"/ca\", \"/auth\", \"/trustedregistryca\", \"/kubeauth\", \"/metrics\", \"/info\", \"/version*\", \"/debug\", \"/openid_keys\", \"/apidocs\", \"kubernetesdocs\" and \"/manage\". Audit log verbosity can be set to one of the following levels: \"none\", \"metadata\", or \"request\". To meet the requirements of this control, the \"request\" verbosity level must be configured in UCP.\n\nThe data captured at each level for UCP and the eNZI authentication and authorization backplane is described below:\n\n\"none\": audit logging is disabled\n\n\"metadata\":\n - method and API endpoint for the request\n - UCP user which made the request\n - response status (success/failure)\n - timestamp of the call\n - object ID of created/updated resource (for create/update calls)\n - license key\n - remote address\n\n\"request\": includes all fields from the \"metadata\" level, as well as the request payload\n\nDTR audits all events associated with repository activities. Events are considered as follows: create, get, delete, update, send, fail, and scan. The following types are associated with the defined audit events: repository, tag, blob, manifest, webhook, uri, promotion, push mirroring, poll mirroring, garbage collector, system.\n\nThe Docker Engine - Enterprise component of Docker Enterprise relies on the underlying host operating system's auditing capabilities. By default, the host OS is not configured to audit Docker Engine - Enterprise.\n\nSatisfies: SRG-APP-000016, SRG-APP-000090, SRG-APP-000091, SRG-APP-000097, SRG-APP-000098, SRG-APP-000496, SRG-APP-000504, SRG-APP-000510, SRG-APP-000509, SRG-APP-000508, SRG-APP-000507, SRG-APP-000506, SRG-APP-000505, SRG-APP-000503, SRG-APP-000502, SRG-APP-000500, SRG-APP-000499, SRG-APP-000498, SRG-APP-000497, SRG-APP-000495, SRG-APP-000494, SRG-APP-000493, SRG-APP-000492, SRG-APP-000485, SRG-APP-000484, SRG-APP-000381, SRG-APP-000343, SRG-APP-000115, SRG-APP-000111, SRG-APP-000101, SRG-APP-000100, SRG-APP-000099, SRG-APP-000096, SRG-APP-000095, SRG-APP-000092, SRG-APP-000089, SRG-APP-000501, SRG-APP-000447",
      "severity": "medium"
    },
    {
      "id": "V-95113",
      "title": "LDAP integration in Docker Enterprise must be configured.",
      "description": "Both the Universal Control Plane (UCP) and Docker Trusted Registry (DTR) components of Docker Enterprise leverage the same authentication and authorization backplane known as eNZi. The eNZi backplane provides automated mechanisms for supporting account management functions and allows for LDAP integration in UCP and DTR. While eNZi includes its own managed user database, it is recommended that LDAP integration be configured to more completely satisfy the requirements of this control.\n\nSatisfies: SRG-APP-000023, SRG-APP-000405, SRG-APP-000404, SRG-APP-000403, SRG-APP-000401, SRG-APP-000397, SRG-APP-000392, SRG-APP-000148, SRG-APP-000141, SRG-APP-000391",
      "severity": "medium"
    },
    {
      "id": "V-95355",
      "title": "A policy set using the built-in role-based access control (RBAC) capabilities in the Universal Control Plane (UCP) component of Docker Enterprise must be configured.",
      "description": "Both the UCP and Docker Trusted Registry (DTR) components of Docker Enterprise leverage the same authentication and authorization backplane known as eNZi. eNZi provides UCP and DTR with role-based access control functionality to enforce approved authorizations for logical access to information and system resources in accordance with applicable access control policies. The eNZi backplane includes its own managed user database, and also allows for LDAP integration in UCP and DTR. While role-based access control mechanisms are provided regardless of whether or not LDAP integration is enabled, it is recommended to enable LDAP integration to better meet the requirements of this control.\n\nSatisfies: SRG-APP-000033, SRG-APP-000038, SRG-APP-000039, SRG-APP-000080, SRG-APP-000243, SRG-APP-000246, SRG-APP-000247, SRG-APP-000267, SRG-APP-000311, SRG-APP-000313, SRG-APP-000314, SRG-APP-000328, SRG-APP-000340, SRG-APP-000342, SRG-APP-000378, SRG-APP-000380, SRG-APP-000384",
      "severity": "medium"
    },
    {
      "id": "V-95357",
      "title": "A policy set using the built-in role-based access control (RBAC) capabilities in the Docker Trusted Registry (DTR) component of Docker Enterprise must be set.",
      "description": "Both the Universal Control Plane (UCP) and DTR components of Docker Enterprise leverage the same authentication and authorization backplane known as eNZi. eNZi provides UCP and DTR with role-based access control functionality to enforce approved authorizations for logical access to information and system resources in accordance with applicable access control policies. These policies are defined in the System Security Plan along with organization information, application user roles, system resources and access requirements. The eNZi backplane includes its own managed user database, and also allows for LDAP integration in UCP and DTR. While role-based access control mechanisms are provided regardless of whether or not LDAP integration is enabled, it is recommended to enable LDAP integration to better meet the requirements of this control.\n\nSatisfies: SRG-APP-000033, SRG-APP-000243, SRG-APP-000246, SRG-APP-000247, SRG-APP-000267, SRG-APP-000328, SRG-APP-000340, SRG-APP-000342, SRG-APP-000378, SRG-APP-000380, SRG-APP-000384, SRG-APP-000038, SRG-APP-000039, SRG-APP-000080, SRG-APP-000311, SRG-APP-000313, SRG-APP-000314",
      "severity": "medium"
    },
    {
      "id": "V-95599",
      "title": "Docker Enterprise sensitive host system directories must not be mounted on containers.",
      "description": "Sensitive host system directories such as below should not be allowed to be mounted as container volumes especially in read-write mode.\n\nLinux:\n\n/\n/boot\n/dev\n/etc\n/lib\n/proc\n/sys\n/usr\n\nWindows:\n\n%windir% (C:\\Windows)\n%windir%\\system32 (C:\\Windows\\system32)\n%programdata%\n%programData%\\docker\nC:\\Program Files\nC:\\Program Files (x86)\nC:\\Users\n\nIf sensitive directories are mounted in read-write mode, it would be possible to make changes to files within those sensitive directories. The changes might bring down security implications or unwarranted changes that could put the Docker host in compromised state.\n\nDocker defaults to a read-write volume but the user can also mount a directory read-only. By default, no sensitive host directories are mounted on containers.",
      "severity": "medium"
    },
    {
      "id": "V-95601",
      "title": "The Docker Enterprise hosts process namespace must not be shared.",
      "description": "Process ID (PID) namespaces isolate the PID number space, meaning that processes in different PID namespaces can have the same PID. This is process level isolation between containers and the host.\n\nPID namespace provides separation of processes. The PID Namespace removes the view of the system processes, and allows process IDs to be reused including PID 1. If the host's PID namespace is shared with the container, it would allow processes within the container to see all of the processes on the host system. This breaks the benefit of process level isolation between the host and the containers. Someone having access to the container can eventually know all the processes running on the host system and can even kill the host system processes from within the container. Hence, do not share the host's process namespace with the containers.\n\nContainer processes cannot see the processes on the host system. In certain cases, the container should share the host's process namespace. For example, the user could build a container with debugging tools like strace or gdb, but want to use these tools when debugging processes within the container. If this is desired, then share only one (or needed) host process by using the -p switch.\n\nExample:\ndocker run --pid=host rhel7 strace -p 1234\n\nBy default, all containers have the PID namespace enabled and the host's process namespace is not shared with the containers.",
      "severity": "medium"
    },
    {
      "id": "V-95603",
      "title": "The Docker Enterprise hosts IPC namespace must not be shared.",
      "description": "IPC (POSIX/SysV IPC) namespace provides separation of named shared memory segments, semaphores, and message queues. IPC namespace on the host thus should not be shared with the containers and should remain isolated.\n\nIPC namespace provides separation of IPC between the host and containers. If the host's IPC namespace is shared with the container, it would allow processes within the container to see all of the IPC on the host system. This breaks the benefit of IPC level isolation between the host and the containers. Someone having access to the container can eventually manipulate the host IPC. Hence, do not share the host's IPC namespace with the containers.\n\nShared memory segments are used to accelerate inter-process communication. It is commonly used by high-performance applications. If such applications are containerized into multiple containers, the user might need to share the IPC namespace of the containers to achieve high performance. In such cases, the user should still be sharing container specific IPC namespaces only and not the host IPC namespace. The user may share the container's IPC namespace with another container as below:\n\nExample:\ndocker run --interactive --tty --ipc=container:e3a7a1a97c58 centos /bin/bash\n\nBy default, all containers have the IPC namespace enabled and host IPC namespace is not shared with any container.",
      "severity": "medium"
    },
    {
      "id": "V-95605",
      "title": "log-opts on all Docker Engine - Enterprise nodes must be configured.",
      "description": "The Universal Control Plane (UCP) and Docker Trusted Registry (DTR) components of Docker Enterprise provide audit record generation capabilities. Audit logs capture all HTTP actions for the following endpoints: Kubernetes API, Swarm API and UCP API. The following UCP API endpoints are excluded from audit logging (where \"*\" designates a wildcard of exclusions): \"/_ping\", \"/ca\", \"/auth\", \"/trustedregistryca\", \"/kubeauth\", \"/metrics\", \"/info\", \"/version*\", \"/debug\", \"/openid_keys\", \"/apidocs\", \"kubernetesdocs\" and \"/manage\". Audit log verbosity can be set to one of the following levels: \"none\", \"metadata\", or \"request\". To meet the requirements of this control, the \"request\" verbosity level must be configured in UCP.\n\nThe data captured at each level for UCP and the eNZI authentication and authorization backplane is described below:\n\n\"none\": audit logging is disabled\n\n\"metadata\":\n - method and API endpoint for the request\n - UCP user which made the request\n - response status (success/failure)\n - timestamp of the call\n - object ID of created/updated resource (for create/update calls)\n - license key\n - remote address\n\n\"request\": includes all fields from the \"metadata\" level, as well as the request payload\n\nDTR audits all events associated with repository activities. Events are considered as follows: create, get, delete, update, send, fail, and scan. The following types are associated with the defined audit events: repository, tag, blob, manifest, webhook, uri, promotion, push mirroring, poll mirroring, garbage collector, system.\n\nAll audit logs generated by UCP and DTR can be forwarded to a remote log aggregation system by configuring an appropriate log driver plugin on all Docker Engine - Enterprise nodes in a cluster.\n\nThe Docker Engine - Enterprise component of Docker Enterprise relies on the underlying host operating system's auditing capabilities. By default, the host OS is not configured to audit Docker Engine - Enterprise.",
      "severity": "medium"
    },
    {
      "id": "V-95607",
      "title": "Docker Enterprise must alert the ISSO and SA (at a minimum) in the event of an audit processing failure.",
      "description": "The Universal Control Plane (UCP) and Docker Trusted Registry (DTR) components of Docker Enterprise provide audit record generation capabilities. Audit logs capture all HTTP actions for the following endpoints: Kubernetes API, Swarm API and UCP API. The following UCP API endpoints are excluded from audit logging (where \"*\" designates a wildcard of exclusions): \"/_ping\", \"/ca\", \"/auth\", \"/trustedregistryca\", \"/kubeauth\", \"/metrics\", \"/info\", \"/version*\", \"/debug\", \"/openid_keys\", \"/apidocs\", \"kubernetesdocs\" and \"/manage\". Audit log verbosity can be set to one of the following levels: \"none\", \"metadata\", or \"request\". To meet the requirements of this control, the \"request\" verbosity level must be configured in UCP.\n\nThe data captured at each level for UCP and the eNZI authentication and authorization backplane is described below:\n\n\"none\": audit logging is disabled\n\n\"metadata\":\n - method and API endpoint for the request\n - UCP user which made the request\n - response status (success/failure)\n - timestamp of the call\n - object ID of created/updated resource (for create/update calls)\n - license key\n - remote address\n\n\"request\": includes all fields from the \"metadata\" level, as well as the request payload\n\nDTR audits all events associated with repository activities. Events are considered as follows: create, get, delete, update, send, fail, and scan. The following types are associated with the defined audit events: repository, tag, blob, manifest, webhook, uri, promotion, push mirroring, poll mirroring, garbage collector, system.\n\nAll audit logs generated by UCP and DTR can be forwarded to a remote log aggregation system by configuring an appropriate log driver plugin on all Docker Engine - Enterprise nodes in a cluster.\n\nThe Docker Engine - Enterprise component of Docker Enterprise relies on the underlying host operating system's auditing capabilities. By default, the host OS is not configured to audit Docker Engine - Enterprise.",
      "severity": "low"
    },
    {
      "id": "V-95609",
      "title": "Docker Incs official GPG key must be added to the host using the users operating systems respective package repository management tooling.",
      "description": "All packaged components of Docker Enterprise are digitally signed using GPG keys maintained by Docker, Inc. The Docker Engine - Enterprise daemon, itself, is digitally signed. Furthermore, all Docker, Inc-managed Linux repositories are themselves signed using GPG keys. On Windows, if Docker is installed via the PowerShell PackageManagement (aka OneGet) provider, the provider is managed by Microsoft, and provider artifacts are signed by Microsoft. The Universal Control Plane (UCP) and Docker Trusted Registry (DTR) installation images are digitally signed by Docker, Inc using Docker Content Trust.",
      "severity": "low"
    },
    {
      "id": "V-95611",
      "title": "The insecure registry capability in the Docker Engine - Enterprise component of Docker Enterprise must be disabled.",
      "description": "Docker considers a private registry either secure or insecure. By default, registries are considered secure.\n\nDocker Enterprise includes the following capabilities that are considered non-essential:\n\n*NOTE: disabling these capabilities negatively affects the operation of Universal Control Plane (UCP) and Docker Trusted Registry (DTR) and should be disregarded when UCP and DTR are installed. The security capabilities provided by UCP and DTR offset any potential vulnerabilities associated with not disabling these essential capabilities the Engine provides.\n\n(Docker Engine - Enterprise: Standalone) - The majority of these items were originally identified as part of the CIS Docker Benchmark, which as of the CIS Docker Benchmark v1.2.0, are still applicable to Docker Engine - Enterprise 18.09\n- inter-container communication (icc)* (CIS Docker Benchmark Recommendation 2.1)\n- insecure registry communication (CIS Docker Benchmark Recommendation 2.4)\n- AUFS storage driver (applicable on Linux only) (CIS Docker Benchmark Recommendation 2.5)\n- listening on the TCP Daemon socket\n- userland proxy for loopback traffic* (CIS Docker Benchmark Recommendation 2.15)\n- experimental features (CIS Docker Benchmark Recommendation 2.17)\n- Swarm Mode (CIS Docker Benchmark Recommendation 7.1)\n\n(Docker Engine - Enterprise: As part of a UCP cluster)\n- insecure registry communication (CIS Docker Benchmark Recommendation 2.4)\n- AUFS storage driver (applicable on Linux only) (CIS Docker Benchmark Recommendation 2.5)\n- listening on the TCP Daemon socket\n- experimental features (CIS Docker Benchmark Recommendation 2.17)\n\n(UCP)\n- Managed user database\n- self-signed certificates\n- periodic usage reporting and API tracking\n- allow users and administrators to schedule containers on all nodes, including UCP managers and DTR nodes\n\n(DTR)\n- periodic data usage/analytics reporting\n- create repository on push\n- self-signed certificates",
      "severity": "medium"
    },
    {
      "id": "V-95613",
      "title": "On Linux, a non-AUFS storage driver in the Docker Engine - Enterprise component of Docker Enterprise must be used.",
      "description": "The aufs storage driver is the oldest storage driver. It is based on a Linux kernel patch-set that is unlikely to be merged into the main Linux kernel. aufs driver is also known to cause some serious kernel crashes. aufs just has legacy support from Docker. Most importantly, aufs is not a supported driver in many Linux distributions using latest Linux kernels.\n\nDocker Enterprise includes the following capabilities that are considered non-essential:\n\n*NOTE: disabling these capabilities negatively affects the operation of Universal Control Plane (UCP) and Docker Trusted Registry (DTR) and should be disregarded when UCP and DTR are installed. The security capabilities provided by UCP and DTR offset any potential vulnerabilities associated with not disabling these essential capabilities the Engine provides.\n\n(Docker Engine - Enterprise: Standalone) - The majority of these items were originally identified as part of the CIS Docker Benchmark, which as of the CIS Docker Benchmark v1.2.0, are still applicable to Docker Engine - Enterprise 18.09\n- inter-container communication (icc)* (CIS Docker Benchmark Recommendation 2.1)\n- insecure registry communication (CIS Docker Benchmark Recommendation 2.4)\n- AUFS storage driver (applicable on Linux only) (CIS Docker Benchmark Recommendation 2.5)\n- listening on the TCP Daemon socket\n- userland proxy for loopback traffic* (CIS Docker Benchmark Recommendation 2.15)\n- experimental features (CIS Docker Benchmark Recommendation 2.17)\n- Swarm Mode (CIS Docker Benchmark Recommendation 7.1)\n\n(Docker Engine - Enterprise: As part of a UCP cluster)\n- insecure registry communication (CIS Docker Benchmark Recommendation 2.4)\n- AUFS storage driver (applicable on Linux only) (CIS Docker Benchmark Recommendation 2.5)\n- listening on the TCP Daemon socket\n- experimental features (CIS Docker Benchmark Recommendation 2.17)\n\n(UCP)\n- Managed user database\n- self-signed certificates\n- periodic usage reporting and API tracking\n- allow users and administrators to schedule containers on all nodes, including UCP managers and DTR nodes\n\n(DTR)\n- periodic data usage/analytics reporting\n- create repository on push\n- self-signed certificates",
      "severity": "medium"
    },
    {
      "id": "V-95615",
      "title": "The userland proxy capability in the Docker Engine - Enterprise component of Docker Enterprise must be disabled.",
      "description": "The docker daemon starts a userland proxy service for port forwarding whenever a port is exposed. Where hairpin NAT is available, this service is generally superfluous to requirements and can be disabled. Docker engine provides two mechanisms for forwarding ports from the host to containers, hairpin NAT, and a userland proxy. In most circumstances, the hairpin NAT mode is preferred as it improves performance and makes use of native Linux iptables functionality instead of an additional component. Where hairpin NAT is available, the userland proxy should be disabled on startup to reduce the attack surface of the installation.\n\nDocker Enterprise includes the following capabilities that are considered non-essential:\n\n*NOTE: disabling these capabilities negatively affects the operation of Universal Control Plane (UCP) and Docker Trusted Registry (DTR) and should be disregarded when UCP and DTR are installed. The security capabilities provided by UCP and DTR offset any potential vulnerabilities associated with not disabling these essential capabilities the Engine provides.\n\n(Docker Engine - Enterprise: Standalone) - The majority of these items were originally identified as part of the CIS Docker Benchmark, which as of the CIS Docker Benchmark v1.2.0, are still applicable to Docker Engine - Enterprise 18.09\n- inter-container communication (icc)* (CIS Docker Benchmark Recommendation 2.1)\n- insecure registry communication (CIS Docker Benchmark Recommendation 2.4)\n- AUFS storage driver (applicable on Linux only) (CIS Docker Benchmark Recommendation 2.5)\n- listening on the TCP Daemon socket\n- userland proxy for loopback traffic* (CIS Docker Benchmark Recommendation 2.15)\n- experimental features (CIS Docker Benchmark Recommendation 2.17)\n- Swarm Mode (CIS Docker Benchmark Recommendation 7.1)\n\n(Docker Engine - Enterprise: As part of a UCP cluster)\n- insecure registry communication (CIS Docker Benchmark Recommendation 2.4)\n- AUFS storage driver (applicable on Linux only) (CIS Docker Benchmark Recommendation 2.5)\n- listening on the TCP Daemon socket\n- experimental features (CIS Docker Benchmark Recommendation 2.17)\n\n(UCP)\n- Managed user database\n- self-signed certificates\n- periodic usage reporting and API tracking\n- allow users and administrators to schedule containers on all nodes, including UCP managers and DTR nodes\n\n(DTR)\n- periodic data usage/analytics reporting\n- create repository on push\n- self-signed certificates",
      "severity": "medium"
    },
    {
      "id": "V-95617",
      "title": "Experimental features in the Docker Engine - Enterprise component of Docker Enterprise must be disabled.",
      "description": "Avoid experimental features in production.\n\nDocker Enterprise includes the following capabilities that are considered non-essential:\n\n*NOTE: disabling these capabilities negatively affects the operation of Universal Control Plane (UCP) and Docker Trusted Registry (DTR) and should be disregarded when UCP and DTR are installed. The security capabilities provided by UCP and DTR offset any potential vulnerabilities associated with not disabling these essential capabilities the Engine provides.\n\n(Docker Engine - Enterprise: Standalone) - The majority of these items were originally identified as part of the CIS Docker Benchmark, which as of the CIS Docker Benchmark v1.2.0, are still applicable to Docker Engine - Enterprise 18.09\n- inter-container communication (icc)* (CIS Docker Benchmark Recommendation 2.1)\n- insecure registry communication (CIS Docker Benchmark Recommendation 2.4)\n- AUFS storage driver (applicable on Linux only) (CIS Docker Benchmark Recommendation 2.5)\n- listening on the TCP Daemon socket\n- userland proxy for loopback traffic* (CIS Docker Benchmark Recommendation 2.15)\n- experimental features (CIS Docker Benchmark Recommendation 2.17)\n- Swarm Mode (CIS Docker Benchmark Recommendation 7.1)\n\n(Docker Engine - Enterprise: As part of a UCP cluster)\n- insecure registry communication (CIS Docker Benchmark Recommendation 2.4)\n- AUFS storage driver (applicable on Linux only) (CIS Docker Benchmark Recommendation 2.5)\n- listening on the TCP Daemon socket\n- experimental features (CIS Docker Benchmark Recommendation 2.17)\n\n(UCP)\n- Managed user database\n- self-signed certificates\n- periodic usage reporting and API tracking\n- allow users and administrators to schedule containers on all nodes, including UCP managers and DTR nodes\n\n(DTR)\n- periodic data usage/analytics reporting\n- create repository on push\n- self-signed certificates",
      "severity": "medium"
    },
    {
      "id": "V-95619",
      "title": "The Docker Enterprise self-signed certificates in Universal Control Plane (UCP) must be replaced with DoD trusted, signed certificates.",
      "description": "Docker Enterprise includes the following capabilities that are considered non-essential:\n\n*NOTE: disabling these capabilities negatively affects the operation of Docker Trusted Registry (DTR) and should be disregarded when UCP and DTR are installed. The security capabilities provided by UCP and DTR offset any potential vulnerabilities associated with not disabling these essential capabilities the Engine provides.\n\n(Docker Engine - Enterprise: Standalone) - The majority of these items were originally identified as part of the CIS Docker Benchmark, which as of the CIS Docker Benchmark v1.2.0, are still applicable to Docker Engine - Enterprise 18.09\n- inter-container communication (icc)* (CIS Docker Benchmark Recommendation 2.1)\n- insecure registry communication (CIS Docker Benchmark Recommendation 2.4)\n- AUFS storage driver (applicable on Linux only) (CIS Docker Benchmark Recommendation 2.5)\n- listening on the TCP Daemon socket\n- userland proxy for loopback traffic* (CIS Docker Benchmark Recommendation 2.15)\n- experimental features (CIS Docker Benchmark Recommendation 2.17)\n- Swarm Mode (CIS Docker Benchmark Recommendation 7.1)\n\n(Docker Engine - Enterprise: As part of a UCP cluster)\n- insecure registry communication (CIS Docker Benchmark Recommendation 2.4)\n- AUFS storage driver (applicable on Linux only) (CIS Docker Benchmark Recommendation 2.5)\n- listening on the TCP Daemon socket\n- experimental features (CIS Docker Benchmark Recommendation 2.17)\n\n(UCP)\n- Managed user database\n- self-signed certificates\n- periodic usage reporting and API tracking\n- allow users and administrators to schedule containers on all nodes, including UCP managers and DTR nodes\n\n(DTR)\n- periodic data usage/analytics reporting\n- create repository on push\n- self-signed certificates",
      "severity": "medium"
    },
    {
      "id": "V-95621",
      "title": "The Docker Enterprise self-signed certificates in Docker Trusted Registry (DTR) must be replaced with DoD trusted, signed certificates.",
      "description": "Docker Enterprise includes the following capabilities that are considered non-essential:\n\n*NOTE: disabling these capabilities negatively affects the operation of Universal Control Plane (UCP) and DTR and should be disregarded when UCP and DTR are installed. The security capabilities provided by UCP and DTR offset any potential vulnerabilities associated with not disabling these essential capabilities the Engine provides.\n\n(Docker Engine - Enterprise: Standalone) - The majority of these items were originally identified as part of the CIS Docker Benchmark, which as of the CIS Docker Benchmark v1.2.0, are still applicable to Docker Engine - Enterprise 18.09\n- inter-container communication (icc)* (CIS Docker Benchmark Recommendation 2.1)\n- insecure registry communication (CIS Docker Benchmark Recommendation 2.4)\n- AUFS storage driver (applicable on Linux only) (CIS Docker Benchmark Recommendation 2.5)\n- listening on the TCP Daemon socket\n- userland proxy for loopback traffic* (CIS Docker Benchmark Recommendation 2.15)\n- experimental features (CIS Docker Benchmark Recommendation 2.17)\n- Swarm Mode (CIS Docker Benchmark Recommendation 7.1)\n\n(Docker Engine - Enterprise: As part of a UCP cluster)\n- insecure registry communication (CIS Docker Benchmark Recommendation 2.4)\n- AUFS storage driver (applicable on Linux only) (CIS Docker Benchmark Recommendation 2.5)\n- listening on the TCP Daemon socket\n- experimental features (CIS Docker Benchmark Recommendation 2.17)\n\n(UCP)\n- Managed user database\n- self-signed certificates\n- periodic usage reporting and API tracking\n- allow users and administrators to schedule containers on all nodes, including UCP managers and DTR nodes\n\n(DTR)\n- periodic data usage/analytics reporting\n- create repository on push\n- self-signed certificates",
      "severity": "medium"
    },
    {
      "id": "V-95623",
      "title": "The option in Universal Control Plane (UCP) allowing users and administrators to schedule containers on all nodes, including UCP managers and Docker Trusted Registry (DTR) nodes must be disabled in Docker Enterprise.",
      "description": "Docker Enterprise includes the following capabilities that are considered non-essential:\n\n*NOTE: disabling these capabilities negatively affects the operation of UCP and DTR and should be disregarded when UCP and DTR are installed. The security capabilities provided by UCP and DTR offset any potential vulnerabilities associated with not disabling these essential capabilities the Engine provides.\n\n(Docker Engine - Enterprise: Standalone) - The majority of these items were originally identified as part of the CIS Docker Benchmark, which as of the CIS Docker Benchmark v1.2.0, are still applicable to Docker Engine - Enterprise 18.09\n- inter-container communication (icc)* (CIS Docker Benchmark Recommendation 2.1)\n- insecure registry communication (CIS Docker Benchmark Recommendation 2.4)\n- AUFS storage driver (applicable on Linux only) (CIS Docker Benchmark Recommendation 2.5)\n- listening on the TCP Daemon socket\n- userland proxy for loopback traffic* (CIS Docker Benchmark Recommendation 2.15)\n- experimental features (CIS Docker Benchmark Recommendation 2.17)\n- Swarm Mode (CIS Docker Benchmark Recommendation 7.1)\n\n(Docker Engine - Enterprise: As part of a UCP cluster)\n- insecure registry communication (CIS Docker Benchmark Recommendation 2.4)\n- AUFS storage driver (applicable on Linux only) (CIS Docker Benchmark Recommendation 2.5)\n- listening on the TCP Daemon socket\n- experimental features (CIS Docker Benchmark Recommendation 2.17)\n\n(UCP)\n- Managed user database\n- self-signed certificates\n- periodic usage reporting and API tracking\n- allow users and administrators to schedule containers on all nodes, including UCP managers and DTR nodes\n\n(DTR)\n- periodic data usage/analytics reporting\n- create repository on push\n- self-signed certificates",
      "severity": "medium"
    },
    {
      "id": "V-95625",
      "title": "The Create repository on push option in Docker Trusted Registry (DTR) must be disabled in Docker Enterprise.",
      "description": "Docker Enterprise includes the following capabilities that are considered non-essential:\n\n*NOTE: disabling these capabilities negatively affects the operation of Universal Control Plane (UCP) and DTR and should be disregarded when UCP and DTR are installed. The security capabilities provided by UCP and DTR offset any potential vulnerabilities associated with not disabling these essential capabilities the Engine provides.\n\n(Docker Engine - Enterprise: Standalone) - The majority of these items were originally identified as part of the CIS Docker Benchmark, which as of the CIS Docker Benchmark v1.2.0, are still applicable to Docker Engine - Enterprise 18.09\n- inter-container communication (icc)* (CIS Docker Benchmark Recommendation 2.1)\n- insecure registry communication (CIS Docker Benchmark Recommendation 2.4)\n- AUFS storage driver (applicable on Linux only) (CIS Docker Benchmark Recommendation 2.5)\n- listening on the TCP Daemon socket\n- userland proxy for loopback traffic* (CIS Docker Benchmark Recommendation 2.15)\n- experimental features (CIS Docker Benchmark Recommendation 2.17)\n- Swarm Mode (CIS Docker Benchmark Recommendation 7.1)\n\n(Docker Engine - Enterprise: As part of a UCP cluster)\n- insecure registry communication (CIS Docker Benchmark Recommendation 2.4)\n- AUFS storage driver (applicable on Linux only) (CIS Docker Benchmark Recommendation 2.5)\n- listening on the TCP Daemon socket\n- experimental features (CIS Docker Benchmark Recommendation 2.17)\n\n(UCP)\n- Managed user database\n- self-signed certificates\n- periodic usage reporting and API tracking\n- allow users and administrators to schedule containers on all nodes, including UCP managers and DTR nodes\n\n(DTR)\n- periodic data usage/analytics reporting\n- create repository on push\n- self-signed certificates",
      "severity": "medium"
    },
    {
      "id": "V-95627",
      "title": "Periodic data usage and analytics reporting in Universal Control Plane (UCP) must be disabled in Docker Enterprise.",
      "description": "Docker Enterprise includes the following capabilities that are considered non-essential:\n\n*NOTE: disabling these capabilities negatively affects the operation of UCP and Docker Trusted Registry (DTR) and should be disregarded when UCP and DTR are installed. The security capabilities provided by UCP and DTR offset any potential vulnerabilities associated with not disabling these essential capabilities the Engine provides.\n\n(Docker Engine - Enterprise: Standalone) - The majority of these items were originally identified as part of the CIS Docker Benchmark, which as of the CIS Docker Benchmark v1.2.0, are still applicable to Docker Engine - Enterprise 18.09\n- inter-container communication (icc)* (CIS Docker Benchmark Recommendation 2.1)\n- insecure registry communication (CIS Docker Benchmark Recommendation 2.4)\n- AUFS storage driver (applicable on Linux only) (CIS Docker Benchmark Recommendation 2.5)\n- listening on the TCP Daemon socket\n- userland proxy for loopback traffic* (CIS Docker Benchmark Recommendation 2.15)\n- experimental features (CIS Docker Benchmark Recommendation 2.17)\n- Swarm Mode (CIS Docker Benchmark Recommendation 7.1)\n\n(Docker Engine - Enterprise: As part of a UCP cluster)\n- insecure registry communication (CIS Docker Benchmark Recommendation 2.4)\n- AUFS storage driver (applicable on Linux only) (CIS Docker Benchmark Recommendation 2.5)\n- listening on the TCP Daemon socket\n- experimental features (CIS Docker Benchmark Recommendation 2.17)\n\n(UCP)\n- Managed user database\n- self-signed certificates\n- periodic usage reporting and API tracking\n- allow users and administrators to schedule containers on all nodes, including UCP managers and DTR nodes\n\n(DTR)\n- periodic data usage/analytics reporting\n- create repository on push\n- self-signed certificates",
      "severity": "medium"
    },
    {
      "id": "V-95629",
      "title": "Periodic data usage and analytics reporting in Docker Trusted Registry (DTR) must be disabled in Docker Enterprise.",
      "description": "Docker Enterprise includes the following capabilities that are considered non-essential:\n\n*NOTE: disabling these capabilities negatively affects the operation of Universal Control Plane (UCP) and DTR and should be disregarded when UCP and DTR are installed. The security capabilities provided by UCP and DTR offset any potential vulnerabilities associated with not disabling these essential capabilities the Engine provides.\n\n(Docker Engine - Enterprise: Standalone) - The majority of these items were originally identified as part of the CIS Docker Benchmark, which as of the CIS Docker Benchmark v1.2.0, are still applicable to Docker Engine - Enterprise 18.09\n- inter-container communication (icc)* (CIS Docker Benchmark Recommendation 2.1)\n- insecure registry communication (CIS Docker Benchmark Recommendation 2.4)\n- AUFS storage driver (applicable on Linux only) (CIS Docker Benchmark Recommendation 2.5)\n- listening on the TCP Daemon socket\n- userland proxy for loopback traffic* (CIS Docker Benchmark Recommendation 2.15)\n- experimental features (CIS Docker Benchmark Recommendation 2.17)\n- Swarm Mode (CIS Docker Benchmark Recommendation 7.1)\n\n(Docker Engine - Enterprise: As part of a UCP cluster)\n- insecure registry communication (CIS Docker Benchmark Recommendation 2.4)\n- AUFS storage driver (applicable on Linux only) (CIS Docker Benchmark Recommendation 2.5)\n- listening on the TCP Daemon socket\n- experimental features (CIS Docker Benchmark Recommendation 2.17)\n\n(UCP)\n- Managed user database\n- self-signed certificates\n- periodic usage reporting and API tracking\n- allow users and administrators to schedule containers on all nodes, including UCP managers and DTR nodes\n\n(DTR)\n- periodic data usage/analytics reporting\n- create repository on push\n- self-signed certificates",
      "severity": "medium"
    },
    {
      "id": "V-95631",
      "title": "An appropriate AppArmor profile must be enabled on Ubuntu systems for Docker Enterprise.",
      "description": "AppArmor protects the Ubuntu OS and applications from various threats by enforcing security policy which is also known as AppArmor profile. The user can create their own AppArmor profile for containers or use the Docker's default AppArmor profile. This would enforce security policies on the containers as defined in the profile.\n\nBy default, docker-default AppArmor profile is applied for running containers and this profile can be found at /etc/apparmor.d/docker.",
      "severity": "medium"
    },
    {
      "id": "V-95635",
      "title": "SELinux security options must be set on Red Hat or CentOS systems for Docker Enterprise.",
      "description": "SELinux provides a Mandatory Access Control (MAC) system on RHEL and CentOS that greatly augments the default Discretionary Access Control (DAC) model. The user can thus add an extra layer of safety by enabling SELinux on the RHEL or CentOS host.\n\nBy default, no SELinux security options are applied on containers.",
      "severity": "medium"
    },
    {
      "id": "V-95637",
      "title": "Linux Kernel capabilities must be restricted within containers as defined in the System Security Plan (SSP) for Docker Enterprise.",
      "description": "By default, Docker starts containers with a restricted set of Linux Kernel Capabilities. It means that any process may be granted the required capabilities instead of root access. Using Linux Kernel Capabilities, the processes do not have to run as root for almost all the specific areas where root privileges are usually needed. Docker supports the addition and removal of capabilities, allowing the use of a non-default profile. This may make Docker more secure through capability removal, or less secure through the addition of capabilities. It is thus recommended to remove all capabilities except those explicitly required for the user's container process.\n\nBy default, below capabilities are available for Linux containers:\n\nAUDIT_WRITE\nCHOWN\nDAC_OVERRIDE\nFOWNER\nFSETID\nKILL\nMKNOD\nNET_BIND_SERVICE\nNET_RAW\nSETFCAP\nSETGID\nSETPCAP\nSETUID\nSYS_CHROOT",
      "severity": "medium"
    },
    {
      "id": "V-95639",
      "title": "Privileged Linux containers must not be used for Docker Enterprise.",
      "description": "Using the --privileged flag gives all Linux Kernel Capabilities to the container thus overwriting the --cap-add and --cap-drop flags. Ensure that it is not used. The --privileged flag gives all capabilities to the container, and it also lifts all the limitations enforced by the device cgroup controller. In other words, the container can then do almost everything that the host can do. This flag exists to allow special use-cases, like running Docker within Docker.",
      "severity": "medium"
    },
    {
      "id": "V-95641",
      "title": "SSH must not run within Linux containers for Docker Enterprise.",
      "description": "SSH server should not be running within the container. The user should instead use Universal Control Plane (UCP) to console in to running containers.\n\nRunning SSH within the container increases the complexity of security management by making it:\n\n- Difficult to manage access policies and security compliance for SSH server\n- Difficult to manage keys and passwords across various containers\n- Difficult to manage security upgrades for SSH server\n- It is possible to have shell access to a container without using SSH, the needlessly increasing the complexity of security management should be avoided\n\nBy default, SSH server is not running inside the container. Only one process per container is allowed.",
      "severity": "medium"
    },
    {
      "id": "V-95643",
      "title": "Only required ports must be open on the containers in Docker Enterprise.",
      "description": "Dockerfile for a container image defines the ports to be opened by default on a container instance. The list of ports may or may not be relevant to the application running within the container.\n\nA container can be run just with the ports defined in the Dockerfile for its image or can be arbitrarily passed run time parameters to open a list of ports. Additionally, over time, Dockerfile may undergo various changes and the list of exposed ports may or may not be relevant to the application running within the container. Opening unneeded ports increase the attack surface of the container and the containerized application. As a recommended practice, do not open unneeded ports.\n\nBy default, all the ports that are listed in the Dockerfile under EXPOSE instruction for an image are opened when a container is run with -P or --publish-all flag.",
      "severity": "medium"
    },
    {
      "id": "V-95645",
      "title": "Docker Enterprise hosts network namespace must not be shared.",
      "description": "The networking mode on a container when set to --net=host, skips placing the container inside separate network stack. In essence, this choice tells Docker to not containerize the container's networking. This would network-wise mean that the container lives \"outside\" in the main Docker host and has full access to its network interfaces.\n\nThis is potentially dangerous. It allows the container process to open low-numbered ports like any other root process. It also allows the container to access network services like D-bus on the Docker host. Thus, a container process can potentially do unexpected things such as shutting down the Docker host. Do not use this option.\n\nBy default, container connects to Docker bridge.",
      "severity": "high"
    },
    {
      "id": "V-95647",
      "title": "Memory usage for all containers must be limited in Docker Enterprise.",
      "description": "By default, all containers on a Docker host share the resources equally. By using the resource management capabilities of Docker host, such as memory limit, the amount of memory that a container may consume can be controlled.\n\nBy default, container can use all of the memory on the host. The user can use memory limit mechanism to prevent a denial of service arising from one container consuming all of the hostâ€™s resources such that other containers on the same host cannot perform their intended functions. Having no limit on memory can lead to issues where one container can easily make the whole system unstable, and as a result, unusable.\n\nBy default, all containers on a Docker host share the resources equally. No memory limits are enforced.",
      "severity": "medium"
    },
    {
      "id": "V-95649",
      "title": "Docker Enterprise CPU priority must be set appropriately on all containers.",
      "description": "By default, all containers on a Docker host share the resources equally. By using the resource management capabilities of Docker host, such as CPU shares, the user control the host CPU resources that a container may consume.\n\nBy default, CPU time is divided between containers equally. If it is desired, to control the CPU time amongst the container instances, use CPU sharing feature. CPU sharing allows to prioritize one container over the other and forbids the lower priority container to claim CPU resources more often. This ensures that the high priority containers are served better.\n\nIf CPU shares are not properly set, the container process may have to starve if the resources on the host are not available. If the CPU resources on the host are free, CPU shares do not place any restrictions on the CPU that the container may use.\n\nBy default, all containers on a Docker host share the resources equally. No CPU shares are enforced.",
      "severity": "low"
    },
    {
      "id": "V-95651",
      "title": "All Docker Enterprise containers root filesystem must be mounted as read only.",
      "description": "The container's root filesystem should be treated as a 'golden image' by using Docker run's --read-only option. This prevents any writes to the container's root filesystem at container runtime and enforces the principle of immutable infrastructure.\n\nEnabling this option forces containers at runtime to explicitly define their data writing strategy to persist or not persist their data. This also reduces security attack vectors since the container instance's filesystem cannot be tampered with or written to unless it has explicit read-write permissions on its filesystem folder and directories.\n\nEnabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. Define what the container's data should and should not persist at runtime to determine which recommendation procedure to utilize.\n\nExample:\n\n- Enable use --tmpfs for temporary file writes to /tmp\n- Use Docker shared data volumes for persistent data writes\n\nBy default, a container will have its root filesystem writable allowing all container processes to write files owned by the container's runtime user.",
      "severity": "high"
    },
    {
      "id": "V-95653",
      "title": "Docker Enterprise host devices must not be directly exposed to containers.",
      "description": "Host devices can be directly exposed to containers at runtime. Do not directly expose host devices to containers especially for containers that are not trusted.\n\nThe --device option exposes the host devices to the containers and consequently, the containers can directly access such host devices. Do not require the container to run in privileged mode to access and manipulate the host devices. By default, the container will be able to read, write and mknod these devices. Additionally, it is possible for containers to remove block devices from the host. Hence, do not expose host devices to containers directly.\n\nIf at all, expose the host device to a container, use the sharing permissions appropriately:\n\nr - read only\nw - writable\nm - mknod allowed\n\nThe user would not be able to use the host devices directly within the containers.\n\nBy default, no host devices are exposed to containers. If the user does not provide sharing permissions and choose to expose a host device to a container, the host device would be exposed with read, write, and mknod permissions.",
      "severity": "high"
    },
    {
      "id": "V-95655",
      "title": "Mount propagation mode must not set to shared in Docker Enterprise.",
      "description": "Mount propagation mode allows mounting volumes in shared, slave or private mode on a container. Do not use shared mount propagation mode until needed.\n\nA shared mount is replicated at all mounts and the changes made at any mount point are propagated to all mounts. Mounting a volume in shared mode does not restrict any other container to mount and make changes to that volume. This unintended volume changes could potentially impact data hosted on the mounted volume. Do not set mount propagation mode to shared until needed.\n\nBy default, the container mounts are private.",
      "severity": "medium"
    },
    {
      "id": "V-95657",
      "title": "The Docker Enterprise hosts UTS namespace must not be shared.",
      "description": "UTS namespaces provide isolation of two system identifiers: the hostname and the NIS domain name. It is used for setting the hostname and the domain that is visible to running processes in that namespace. Processes running within containers do not typically require to know hostname and domain name. Hence, the namespace should not be shared with the host.\n\nSharing the UTS namespace with the host provides full permission to the container to change the hostname of the host. This must not be allowed.\n\nBy default, all containers have the UTS namespace enabled and host UTS namespace is not shared with any container.",
      "severity": "medium"
    },
    {
      "id": "V-95659",
      "title": "The Docker Enterprise default seccomp profile must not be disabled.",
      "description": "Seccomp filtering provides a means for a process to specify a filter for incoming system calls. The default Docker seccomp profile works on whitelist basis and allows 311 system calls blocking all others. It should not be disabled unless it hinders the container application usage.\n\nA large number of system calls are exposed to every userland process with many of them going unused for the entire lifetime of the process. Most of the applications do not need all the system calls and thus benefit by having a reduced set of available system calls. The reduced set of system calls reduces the total kernel surface exposed to the application and thus improvises application security.\n\nThe default seccomp profile blocks syscalls, regardless of --cap-add passed to the container. Create a custom seccomp profile in such cases. Disable the default seccomp profile by passing --security-opt=seccomp:unconfined on docker run.\n\nWhen running a container, it uses the default profile unless it is overridden with the --security-opt option.",
      "severity": "high"
    },
    {
      "id": "V-95661",
      "title": "Docker Enterprise exec commands must not be used with privileged option.",
      "description": "Do not use docker exec with --privileged option.\n\nUsing --privileged option in docker exec gives extended Linux capabilities to the command. Do not run docker exec with the --privileged option, especially when running containers with dropped capabilities or with enhanced restrictions. By default, docker exec command runs without --privileged option.",
      "severity": "high"
    },
    {
      "id": "V-95663",
      "title": "Docker Enterprise exec commands must not be used with the user option.",
      "description": "Do not docker exec with --user option.\n\nUsing --user option in docker exec executes the command within the container as that user. Do not run docker exec with the --user option , especially when running containers with dropped capabilities or with enhanced restrictions. For example, suppose the container is running as tomcat user (or any other non-root user), it would be possible to run a command through docker exec as rootwith --user=root option. \n\nBy default, docker exec command runs without --user option.",
      "severity": "medium"
    },
    {
      "id": "V-95665",
      "title": "cgroup usage must be confirmed in Docker Enterprise.",
      "description": "It is possible to attach to a particular cgroup on container run. Confirming cgroup usage would ensure that containers are running under defined cgroups.\n\nSystem administrators typically define cgroups under which containers are supposed to run. Even if cgroups are not explicitly defined by the system administrators, containers run under docker cgroup by default. At run-time, it is possible to attach to a different cgroup other than the one that was expected to be used. This usage should be monitored and confirmed. By attaching to a different cgroup than the one that is expected, excess permissions and resources might be granted to the container and thus, can prove to be unsafe.\n\nBy default, containers run under docker cgroup.",
      "severity": "medium"
    },
    {
      "id": "V-95667",
      "title": "All Docker Enterprise containers must be restricted from acquiring additional privileges.",
      "description": "Restrict the container from acquiring additional privileges via suid or sgid bits.\n\nA process can set the no_new_priv bit in the kernel. It persists across fork, clone, and execve. The no_new_priv bit ensures that the process or its children processes do not gain any additional privileges via suid or sgid bits. This way a lot of dangerous operations become a lot less dangerous because there is no possibility of subverting privileged binaries.\n\nno_new_priv prevents LSMs like SELinux from transitioning to process labels that have access not allowed to the current process.\n\nBy default, new privileges are not restricted.",
      "severity": "high"
    },
    {
      "id": "V-95669",
      "title": "The Docker Enterprise hosts user namespace must not be shared.",
      "description": "Do not share the host's user namespaces with the containers.\n\nUser namespaces ensure that a root process inside the container will be mapped to a non-root process outside the container. Sharing the user namespaces of the host with the container thus does not isolate users on the host with users on the containers.\n\nBy default, the host user namespace is shared with the containers until user namespace support is enabled.",
      "severity": "high"
    },
    {
      "id": "V-95671",
      "title": "The Docker Enterprise socket must not be mounted inside any containers.",
      "description": "The docker socket docker.sock (Linux) and \\\\.\\pipe\\docker_engine (Windows) should not be mounted inside a container, with the exception case being during the installation of Universal Control Plane (UCP) component of Docker Enterprise as it is required for install.\n\nIf the docker socket is mounted inside a container it would allow processes running within the container to execute docker commands which effectively allows for full control of the host.\n\nBy default, docker.sock (linux) and \\\\.\\pipe\\docker_engine (windows) is not mounted inside containers.",
      "severity": "high"
    },
    {
      "id": "V-95673",
      "title": "Docker Enterprise privileged ports must not be mapped within containers.",
      "description": "The TCP/IP port numbers below 1024 are considered privileged ports. Normal users and processes are not allowed to use them for various security reasons. Docker allows a container port to be mapped to a privileged port.\n\nBy default, if the user does not specifically declare the container port to host port mapping, Docker automatically and correctly maps the container port to one available in 49153-65535 block on the host. But, Docker allows a container port to be mapped to a privileged port on the host if the user explicitly declared it. This is so because containers are executed with NET_BIND_SERVICE Linux kernel capability that does not restrict the privileged port mapping. The privileged ports receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.",
      "severity": "high"
    },
    {
      "id": "V-95675",
      "title": "Docker Enterprise incoming container traffic must be bound to a specific host interface.",
      "description": "By default, Docker containers can make connections to the outside world, but the outside world cannot connect to containers. Each outgoing connection will appear to originate from one of the host machine's own IP addresses. Only allow container services to be contacted through a specific external interface on the host machine.\n\nIf there are multiple network interfaces on the host machine, the container can accept connections on the exposed ports on any network interface. This might not be desired and may not be secured. Many times, a particular interface is exposed externally and services such as intrusion detection, intrusion prevention, firewall, load balancing, etc. are run on those interfaces to screen incoming public traffic. Hence, do not accept incoming connections on any interface. Only allow incoming connections from a particular external interface.\n\nBy default, Docker exposes the container ports on 0.0.0.0, the wildcard IP address that will match any possible incoming network interface on the host machine.",
      "severity": "medium"
    },
    {
      "id": "V-95677",
      "title": "SAML integration must be enabled in Docker Enterprise.",
      "description": "Both the Universal Control Plane (UCP) and Docker Trusted Registry (DTR) components of Docker Enterprise leverage the same authentication and authorization backplane known as eNZi. The eNZi backplane includes its own managed user database, and also allows for LDAP and SAML integration in UCP and DTR. To meet the requirements of this control, configure LDAP and SAML integration.\n\nSatisfies: SRG-APP-000149, SRG-APP-000150, SRG-APP-000151, SRG-APP-000152, SRG-APP-000153, SRG-APP-000391, SRG-APP-000392, SRG-APP-000402, SRG-APP-000403, SRG-APP-000404, SRG-APP-000405",
      "severity": "medium"
    },
    {
      "id": "V-95679",
      "title": "The certificate chain used by Universal Control Plane (UCP) client bundles must match what is defined in the System Security Plan (SSP) in Docker Enterprise.",
      "description": "Both the UCP and Docker Trusted Registry (DTR) components of Docker Enterprise leverage the same authentication and authorization backplane known as eNZi. UCP has the ability to use external certificates or internal self-signed. In the case of self-signed UCP includes a certificate authority which is used to sign client bundles and to authenticate users via the eNZi backplane. With an external certificate authority (CA) users will use their existing x509 certs. The external CA will be added in an administrative function and will dictate the root CA for the user's chain.",
      "severity": "medium"
    },
    {
      "id": "V-95681",
      "title": "Docker Enterprise secret management commands must be used for managing secrets in a Swarm cluster.",
      "description": "Use Docker's in-built secret management commands for managing sensitive data that which can be stored in key/value pairs. Examples include API tokens, database connection strings and credentials, SSL certificates, and the like.",
      "severity": "medium"
    },
    {
      "id": "V-95683",
      "title": "The Lifetime Minutes and Renewal Threshold Minutes Login Session Controls must be set to 10 and 0 respectively in Docker Enterprise.",
      "description": "The Universal Control Plane (UCP) component of Docker Enterprise includes a built-in access authorization mechanism called eNZi which can be integrated with an LDAP server and subsequently terminate all network connections associated with a communications session at the end of the session, or as follows: for in-band management sessions (privileged sessions), the session must be terminated after 10 minutes of inactivity; and for user sessions (non-privileged session), the session must be terminated after 15 minutes of inactivity, except to fulfill documented and validated mission requirements. The lifetime minutes login session control is configured with a default of 60 minutes (1 hour) and the renewal threshold minutes is configured with a default of 20 minutes. For reference, the lifetime login session control in UCP specifies the initial lifetime (in minutes) of a session from the moment it is generated. The renewal threshold setting indicates a period of time (in minutes) before the expiration of a session where, if used, a session will be extended by the current configured lifetime from then. This value cannot be greater than the configured lifetime. A value equal to the lifetime means that sessions will be extended with every use. A value of zero indicates that sessions should never be extended but this may result in unexpectedly being logged out if the session expires while performing a series of actions in the UI. This configuration only applies to both the UCP and Docker Trusted Registry (DTR) management consoles and not when connecting via the command line. When connecting via the command line, this control is not applicable.\n\nIt's important to note that the notion of a session varies depending on how one is connecting to a UCP cluster or DTR. In all of these cases, there is no specific session termination capability. Either the session times out, the user's client bundle has expired, or a user explicitly logs out. This has been outlined as follows:\n\n(UCP and DTR UIs) When connecting to a UCP cluster or DTR via the web console, a user's session is active until any of the following conditions is met:\n- the session expires based on the values configured for \"Lifetime Minutes\" and \"Renewal Threshold Minutes\" in the UCP Admin Settings\n- the user explicitly clicks the \"Sign Out\" button\n\n(UCP and DTR CLIs) When connecting to a UCP cluster or DTR via the command line using a client bundle, a user's session is active until any of the following conditions is met:\n- the certificate contained within a user's client bundle hasn't expired\n- the public key in the certificate contained with a user's client bundle is no long associated with that user (i.e. a client bundle is revoked from within the UCP user management options)\n- the user's account is no longer active (either explicitly disabled from within the UCP user management options or at the LDAP server)\n- the user's password is changed\n\nSatisfies: SRG-APP-000190, SRG-APP-000002, SRG-APP-000003, SRG-APP-000295, SRG-APP-000389, SRG-APP-000400",
      "severity": "medium"
    },
    {
      "id": "V-95685",
      "title": "Docker Secrets must be used to store configuration files and small amounts of user-generated data (up to 500 kb in size) in Docker Enterprise.",
      "description": "By leveraging Docker Secrets or Kubernetes secrets to store configuration files and small amounts of user-generated data (up to 500 kb in size), the data is encrypted at rest by the Engine's FIPS-validated cryptography.",
      "severity": "medium"
    },
    {
      "id": "V-95687",
      "title": "Docker Enterprise container health must be checked at runtime.",
      "description": "If the container image does not have an HEALTHCHECK instruction defined, use --health-cmd parameter at container runtime for checking container health.\n\nOne of the important security triads is availability. If the container image being used does not have a pre-defined HEALTHCHECK instruction, use the --health-cmd parameter to check container health at runtime. Based on the reported health status, take necessary actions.\n\nBy default, health checks are not done at container runtime.",
      "severity": "medium"
    },
    {
      "id": "V-95689",
      "title": "PIDs cgroup limits must be used in Docker Enterprise.",
      "description": "Use --pids-limit flag at container runtime.\n\nAttackers could launch a fork bomb with a single command inside the container. This fork bomb can crash the entire system and requires a restart of the host to make the system functional again. PIDs cgroup --pids-limit will prevent this kind of attacks by restricting the number of forks that can happen inside a container at a given time.\n\nThe Default value for --pids-limit is 0 which means there is no restriction on the number of forks. Also, note that PIDs cgroup limit works only for the kernel versions 4.3+.",
      "severity": "medium"
    },
    {
      "id": "V-95691",
      "title": "The Docker Enterprise per user limit login session control must be set per the requirements in the System Security Plan (SSP).",
      "description": "The Universal Control Plane (UCP) component of Docker Enterprise includes a built-in access authorization mechanism called eNZi which can be integrated with an LDAP server and allows for automatic user session termination after organization-defined conditions or trigger events requiring session disconnect. The lifetime minutes login session control is configured with a default of 60 minutes (1 hour) and the renewal threshold minutes is configured with a default of 20 minutes. For reference, the lifetime login session control in UCP specifies the initial lifetime (in minutes) of a session from the moment it is generated. The renewal threshold setting indicates a period of time (in minutes) before the expiration of a session where, if used, a session will be extended by the current configured lifetime from then. This value cannot be greater than the configured lifetime. A value equal to the lifetime means that sessions will be extended with every use. A value of zero indicates that sessions should never be extended but this may result in unexpectedly being logged out if the session expires while performing a series of actions in the UI. This configuration only applies to both the UCP and Docker Trusted Registry (DTR) management consoles and not when connecting via the command line. When connecting via the command line, this control is not applicable.\n\nIt's important to note that the notion of a session varies depending on how one is connecting to a UCP cluster or DTR. In all of these cases, there is no specific session termination capability. Either the session times out, the user's client bundle has expired, or a user explicitly logs out. This has been outlined as follows:\n\n(UCP and DTR UIs) When connecting to a UCP cluster or DTR via the web console, a user's session is active until any of the following conditions is met:\n- the session expires based on the values configured for \"Lifetime Minutes\" and \"Renewal Threshold Minutes\" in the UCP Admin Settings\n- the user explicitly clicks the \"Sign Out\" button\n\n(UCP and DTR CLIs) When connecting to a UCP cluster or DTR via the command line using a client bundle, a user's session is active until any of the following conditions is met:\n- the certificate contained within a user's client bundle hasn't expired\n- the public key in the certificate contained with a user's client bundle is no long associated with that user (i.e. a client bundle is revoked from within the UCP user management options)\n- the user's account is no longer active (either explicitly disabled from within the UCP user management options or at the LDAP server)\n- the user's password is changed\n\n*NOTE: Docker Engine - Enterprise, by itself, does not meet the requirements of this control. If the intent is to use Docker in a model consistent with the access control policies as required by this control, obtain and properly configure the UCP component of Docker Enterprise.",
      "severity": "low"
    },
    {
      "id": "V-95693",
      "title": "Docker Enterprise images must be built with the USER instruction to prevent containers from running as root.",
      "description": "Both the Universal Control Plane (UCP) and Docker Trusted Registry (DTR) components of Docker Enterprise leverage the same authentication and authorization backplane known as eNZi. The eNZi backplane includes its own managed user database, and also allows for LDAP integration in UCP and DTR. To meet the requirements of this control, configure LDAP integration. Apply an applicable set of role-based access control (RBAC) policies using the built-in capabilities provided by UCP in order to prevent organization-defined software from executing at higher privilege levels than users executing the software.\n\nBy default, Docker images that are built without the USER instruction will be run as containers as root. Therefore, it is imperative that container images include the USER instruction and that the referenced UID/GID has been defined in the base image or previous instruction set.",
      "severity": "medium"
    },
    {
      "id": "V-95695",
      "title": "An appropriate Docker Engine - Enterprise log driver plugin must be configured to collect audit events from Universal Control Plane (UCP) and Docker Trusted Registry (DTR).",
      "description": "The UCP and DTR components of Docker Enterprise provide audit record generation capabilities. Audit logs capture all HTTP actions for the following endpoints: Kubernetes API, Swarm API and UCP API. The following UCP API endpoints are excluded from audit logging (where \"*\" designates a wildcard of exclusions): \"/_ping\", \"/ca\", \"/auth\", \"/trustedregistryca\", \"/kubeauth\", \"/metrics\", \"/info\", \"/version*\", \"/debug\", \"/openid_keys\", \"/apidocs\", \"kubernetesdocs\" and \"/manage\". Audit log verbosity can be set to one of the following levels: \"none\", \"metadata\", or \"request\". To meet the requirements of this control, the \"request\" verbosity level must be configured in UCP.\n\nThe data captured at each level for UCP and the eNZI authentication and authorization backplane is described below:\n\n\"none\": audit logging is disabled\n\n\"metadata\":\n - method and API endpoint for the request\n - UCP user which made the request\n - response status (success/failure)\n - timestamp of the call\n - object ID of created/updated resource (for create/update calls)\n - license key\n - remote address\n\n\"request\": includes all fields from the \"metadata\" level, as well as the request payload\n\nDTR audits all events associated with repository activities. Events are considered as follows: create, get, delete, update, send, fail, and scan. The following types are associated with the defined audit events: repository, tag, blob, manifest, webhook, uri, promotion, push mirroring, poll mirroring, garbage collector, system.\n\nAll audit logs generated by UCP and DTR can be forwarded to a remote log aggregation system by configuring an appropriate log driver plugin on all Docker Engine - Enterprise nodes in a cluster.\n\nThe Docker Engine - Enterprise component of Docker Enterprise relies on the underlying host operating system's auditing capabilities. By default, the host OS is not configured to audit Docker Engine - Enterprise.\n\nSatisfies: SRG-APP-000343, SRG-APP-000381, SRG-APP-000492, SRG-APP-000493, SRG-APP-000494, SRG-APP-000495, SRG-APP-000496, SRG-APP-000497, SRG-APP-000498, SRG-APP-000499, SRG-APP-000501, SRG-APP-000502, SRG-APP-000503, SRG-APP-000504, SRG-APP-000505, SRG-APP-000506, SRG-APP-000507, SRG-APP-000508, SRG-APP-000509, SRG-APP-000510, SRG-APP-000500",
      "severity": "medium"
    },
    {
      "id": "V-95697",
      "title": "The Docker Enterprise max-size and max-file json-file drivers logging options in the daemon.json configuration file must be configured to allocate audit record storage capacity for Universal Control Plane (UCP) and Docker Trusted Registry (DTR) per the requirements set forth by the System Security Plan (SSP).",
      "description": "By default, the UCP and DTR components of Docker Enterprise leverage the \"json-file\" Engine logging driver. This driver has configurable \"max-size\" and \"max-file\" options which are applicable in the context of this control. The \"max-size\" option defines the maximum size of the log before it is rolled. By default it is set to \"unlimited\" and is never rolled. The \"max-file\" option defines the maximum number of log files that can be present whereby if rolling the logs creates excess files, the oldest file is removed. This setting is only effective when \"max-size\" is also set. By default, \"max-file\" is set to \"1\".\n\nThe Docker Engine - Enterprise audit logs are stored in default locations according to the chart on this site https://docs.docker.com/config/daemon/#read-the-logs. For the Engine's daemon logs, allocate sufficient storage for the default log locations on the underlying host operating system per the requirements set forth by the SSP.",
      "severity": "medium"
    },
    {
      "id": "V-95699",
      "title": "All Docker Engine - Enterprise nodes must be configured with a log driver plugin that sends logs to a remote log aggregation system (SIEM).",
      "description": "The Universal Control Plane (UCP) and Docker Trusted Registry (DTR) components of Docker Enterprise provide audit record generation capabilities. Audit logs capture all HTTP actions for the following endpoints: Kubernetes API, Swarm API and UCP API. The following UCP API endpoints are excluded from audit logging (where \"*\" designates a wildcard of exclusions): \"/_ping\", \"/ca\", \"/auth\", \"/trustedregistryca\", \"/kubeauth\", \"/metrics\", \"/info\", \"/version*\", \"/debug\", \"/openid_keys\", \"/apidocs\", \"kubernetesdocs\" and \"/manage\". Audit log verbosity can be set to one of the following levels: \"none\", \"metadata\", or \"request\". To meet the requirements of this control, the \"request\" verbosity level must be configured in UCP.\n\nThe data captured at each level for UCP and the eNZI authentication and authorization backplane is described below:\n\n\"none\": audit logging is disabled\n\n\"metadata\":\n - method and API endpoint for the request\n - UCP user which made the request\n - response status (success/failure)\n - timestamp of the call\n - object ID of created/updated resource (for create/update calls)\n - license key\n - remote address\n\n\"request\": includes all fields from the \"metadata\" level, as well as the request payload\n\nDTR audits all events associated with repository activities. Events are considered as follows: create, get, delete, update, send, fail, and scan. The following types are associated with the defined audit events: repository, tag, blob, manifest, webhook, uri, promotion, push mirroring, poll mirroring, garbage collector, system.\n\nAll audit logs generated by UCP and DTR can be forwarded to a remote log aggregation system by configuring an appropriate log driver plugin on all Docker Engine - Enterprise nodes in a cluster.\n\nThe Docker Engine - Enterprise component of Docker Enterprise relies on the underlying host operating system's auditing capabilities. By default, the host OS is not configured to audit Docker Engine - Enterprise.",
      "severity": "medium"
    },
    {
      "id": "V-95701",
      "title": "Log aggregation/SIEM systems must be configured to alarm when audit storage space for Docker Engine - Enterprise nodes exceed 75% usage.",
      "description": "The Universal Control Plane (UCP) and Docker Trusted Registry (DTR) components of Docker Enterprise provide audit record generation capabilities. Audit logs capture all HTTP actions for the following endpoints: Kubernetes API, Swarm API and UCP API. The following UCP API endpoints are excluded from audit logging (where \"*\" designates a wildcard of exclusions): \"/_ping\", \"/ca\", \"/auth\", \"/trustedregistryca\", \"/kubeauth\", \"/metrics\", \"/info\", \"/version*\", \"/debug\", \"/openid_keys\", \"/apidocs\", \"kubernetesdocs\" and \"/manage\". Audit log verbosity can be set to one of the following levels: \"none\", \"metadata\", or \"request\". To meet the requirements of this control, the \"request\" verbosity level must be configured in UCP.\n\nThe data captured at each level for UCP and the eNZI authentication and authorization backplane is described below:\n\n\"none\": audit logging is disabled\n\n\"metadata\":\n - method and API endpoint for the request\n - UCP user which made the request\n - response status (success/failure)\n - timestamp of the call\n - object ID of created/updated resource (for create/update calls)\n - license key\n - remote address\n\n\"request\": includes all fields from the \"metadata\" level, as well as the request payload\n\nDTR audits all events associated with repository activities. Events are considered as follows: create, get, delete, update, send, fail, and scan. The following types are associated with the defined audit events: repository, tag, blob, manifest, webhook, uri, promotion, push mirroring, poll mirroring, garbage collector, system.\n\nAll audit logs generated by UCP and DTR can be forwarded to a remote log aggregation system by configuring an appropriate log driver plugin on all Docker Engine - Enterprise nodes in a cluster.\n\nThe Docker Engine - Enterprise component of Docker Enterprise relies on the underlying host operating system's auditing capabilities. By default, the host OS is not configured to audit Docker Engine - Enterprise.\n",
      "severity": "medium"
    },
    {
      "id": "V-95703",
      "title": "Log aggregation/SIEM systems must be configured to notify SA and ISSO on Docker Engine - Enterprise audit failure events.",
      "description": "The Universal Control Plane (UCP) and Docker Trusted Registry (DTR) components of Docker Enterprise provide audit record generation capabilities. Audit logs capture all HTTP actions for the following endpoints: Kubernetes API, Swarm API and UCP API. The following UCP API endpoints are excluded from audit logging (where \"*\" designates a wildcard of exclusions): \"/_ping\", \"/ca\", \"/auth\", \"/trustedregistryca\", \"/kubeauth\", \"/metrics\", \"/info\", \"/version*\", \"/debug\", \"/openid_keys\", \"/apidocs\", \"kubernetesdocs\" and \"/manage\". Audit log verbosity can be set to one of the following levels: \"none\", \"metadata\", or \"request\". To meet the requirements of this control, the \"request\" verbosity level must be configured in UCP.\n\nThe data captured at each level for UCP and the eNZI authentication and authorization backplane is described below:\n\n\"none\": audit logging is disabled\n\n\"metadata\":\n - method and API endpoint for the request\n - UCP user which made the request\n - response status (success/failure)\n - timestamp of the call\n - object ID of created/updated resource (for create/update calls)\n - license key\n - remote address\n\n\"request\": includes all fields from the \"metadata\" level, as well as the request payload\n\nDTR audits all events associated with repository activities. Events are considered as follows: create, get, delete, update, send, fail, and scan. The following types are associated with the defined audit events: repository, tag, blob, manifest, webhook, uri, promotion, push mirroring, poll mirroring, garbage collector, system.\n\nAll audit logs generated by UCP and DTR can be forwarded to a remote log aggregation system by configuring an appropriate log driver plugin on all Docker Engine - Enterprise nodes in a cluster.\n\nThe Docker Engine - Enterprise component of Docker Enterprise relies on the underlying host operating system's auditing capabilities. By default, the host OS is not configured to audit Docker Engine - Enterprise.",
      "severity": "medium"
    },
    {
      "id": "V-95705",
      "title": "The Docker Enterprise log aggregation/SIEM systems must be configured to send an alert the ISSO/ISSM when unauthorized software is installed.",
      "description": "A Docker image is analogous to software in the context of this control.\n\nAll components of Docker Enterprise can be configured to send logs to a remote syslog server in order to meet the requirements of this control. Universal Control Plane (UCP) remote syslog configuration is done via the UCP configuration settings. Docker Trusted Registry (DTR) remote syslog configuration is done via an appropriate Docker Engine - Enterprise logging driver.\n\nThe UCP and DTR components of Docker Enterprise provide audit record generation capabilities. Audit logs capture all HTTP actions for the following endpoints: Kubernetes API, Swarm API and UCP API. The following UCP API endpoints are excluded from audit logging (where \"*\" designates a wildcard of exclusions): \"/_ping\", \"/ca\", \"/auth\", \"/trustedregistryca\", \"/kubeauth\", \"/metrics\", \"/info\", \"/version*\", \"/debug\", \"/openid_keys\", \"/apidocs\", \"kubernetesdocs\" and \"/manage\". Audit log verbosity can be set to one of the following levels: \"none\", \"metadata\", or \"request\". To meet the requirements of this control, the \"request\" verbosity level must be configured in UCP.\n\nThe data captured at each level for UCP and the eNZI authentication and authorization backplane is described below:\n\n\"none\": audit logging is disabled\n\n\"metadata\":\n - method and API endpoint for the request\n - UCP user which made the request\n - response status (success/failure)\n - timestamp of the call\n - object ID of created/updated resource (for create/update calls)\n - license key\n - remote address\n\n\"request\": includes all fields from the \"metadata\" level, as well as the request payload\n\nDTR audits all events associated with repository activities. Events are considered as follows: create, get, delete, update, send, fail, and scan. The following types are associated with the defined audit events: repository, tag, blob, manifest, webhook, uri, promotion, push mirroring, poll mirroring, garbage collector, system.",
      "severity": "medium"
    },
    {
      "id": "V-95707",
      "title": "Docker Enterprise network ports on all running containers must be limited to what is needed.",
      "description": "By itself, Docker Engine - Enterprise is configured by default to listen for API requests via a UNIX domain socket (or IPC socket) created at /var/run/docker.sock on supported Linux distributions and via a named pipe at npipe:////./pipe/docker_engine on Windows Server 2016 and newer. In this configuration, this control is not applicable. Docker Engine - Enterprise can also be configured to listen for API requests via additional socket types, including both TCP and FD (only on supported systemd-based Linux distributions). If configured to listen for API requests via the TCP socket type over TCP port 2376 and with the daemon flags and SSL certificates, then, at a minimum, TLS 1.2 is used for encryption; therefore this control is applicable and is inherently met in this configuration. If configured to listen for API requests via the TCP socket type, but without TLS verification and certifications, then the instance remains vulnerable and is not properly configured to meet the requirements of this control. If configured to listen for API requests via the fd socket type, then this control is not applicable. More information can be found at https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-socket-option. The TCP socket binding should be disabled when running Engine as part of a UCP cluster.\n\nA container can be run just with the ports defined in the Dockerfile for its image or can be arbitrarily passed run time parameters to open a list of ports. Additionally, over time, Dockerfiles may undergo various changes and the list of exposed ports may or may not be relevant to the application running within the container. Opening unneeded ports increase the attack surface of the container and the containerized application. Per the requirements set forth by the System Security Plan (SSP), ensure only needed ports are open on all running containers.",
      "severity": "medium"
    },
    {
      "id": "V-95709",
      "title": "Content Trust enforcement must be enabled in Universal Control Plane (UCP) in Docker Enterprise.",
      "description": "The UCP and Docker Trusted Registry (DTR) components of Docker Enterprise can be used in concert to perform an integrity check of organization-defined software at startup. In the context of Docker Enterprise, software would be analogous to Docker images that have been pulled from trusted or untrusted sources. Docker Hub is the most common upstream endpoint for retrieving Docker images. However, only \"Docker Certified\" images on Docker Hub are considered trusted and come with SLAs and trusted signatures from their respective vendors. All other images from Docker Hub or other external registries must be carefully inspected and triaged prior to use. Docker Content Trust (DCT) provides for content integrity checking mechanisms on Docker images. DCT can be combined with LDAP, Docker Trusted Registry (DTR) and Universal Control Plane (UCP) to enforce image signatures from users/accounts in LDAP. Therefore, to meet the requirements of this control, it is imperative that UCP has LDAP integration enabled and that content trust enforcement is enabled and properly configured.\n\nAn operational requirement of this control is that of the required use of an established continuous integration and deployment workflow that effectively dictates exactly what software is allowed to run on UCP.",
      "severity": "medium"
    },
    {
      "id": "V-95711",
      "title": "Only trusted, signed images must be on Universal Control Plane (UCP) in Docker Enterprise.",
      "description": "The UCP and Docker Trusted Registry (DTR) components of Docker Enterprise can be used in concert to perform an integrity check of organization-defined software at startup. In the context of Docker Enterprise, software would be analogous to Docker images that have been pulled from trusted or untrusted sources. Docker Hub is the most common upstream endpoint for retrieving Docker images. However, only \"Docker Certified\" images on Docker Hub are considered trusted and come with SLAs and trusted signatures from their respective vendors. All other images from Docker Hub or other external registries must be carefully inspected and triaged prior to use. Docker Content Trust (DCT) provides for content integrity checking mechanisms on Docker images. DCT can be combined with LDAP, DTR and UCP to enforce image signatures from users/accounts in LDAP. Therefore, to meet the requirements of this control, it is imperative that UCP has LDAP integration enabled and that content trust enforcement is enabled and properly configured.\n\nAn operational requirement of this control is that of the required use of an established continuous integration and deployment workflow that effectively dictates exactly what software is allowed to run on UCP.\n\nSatisfies: SRG-APP-000386, SRG-APP-000480, SRG-APP-000484, SRG-APP-000485, SRG-APP-000475",
      "severity": "medium"
    },
    {
      "id": "V-95713",
      "title": "Vulnerability scanning must be enabled for all repositories in the Docker Trusted Registry (DTR) component of Docker Enterprise.",
      "description": "DTR can scan Docker images for vulnerabilities and this capability should be enabled to meet the requirements of this control.\n\nWhen enabled, for every Docker image that is pushed to DTR, a scan of each of the image layers is conducted. An analysis of all packages and compiled binaries is done for each image layer and if a package or binary is associated with a known vulnerability as identified by the MITRE CVE or NIST NVD databases, then it is flagged in DTR.",
      "severity": "medium"
    },
    {
      "id": "V-95715",
      "title": "Universal Control Plane (UCP) must be integrated with a trusted certificate authority (CA) in Docker Enterprise.",
      "description": "Both the UCP and Docker Trusted Registry (DTR) components of Docker Enterprise leverage the same authentication and authorization backplane known as eNZi. The eNZi backplane includes its own managed user database, and also allows for LDAP integration in UCP and DTR. To meet the requirements of this control, configure LDAP integration. UCP also includes two certificate authorities for establishing root of trust. One CA is used to sign client bundles and the other is used for TLS communication between UCP components and nodes. Both of these CAs should be integrated with an external, trusted CA. DTR should be integrated with this same external, trusted CA as well.",
      "severity": "medium"
    },
    {
      "id": "V-95719",
      "title": "Docker Trusted Registry (DTR) must be integrated with a trusted certificate authority (CA) in Docker Enterprise.",
      "description": "Both the Universal Control Plane (UCP) and DTR components of Docker Enterprise leverage the same authentication and authorization backplane known as eNZi. The eNZi backplane includes its own managed user database, and also allows for LDAP integration in UCP and DTR. To meet the requirements of this control, configure LDAP integration. UCP also includes two certificate authorities for establishing root of trust. One CA is used to sign client bundles and the other is used for TLS communication between UCP components and nodes. Both of these CAs should be integrated with an external, trusted CA. DTR should be integrated with this same external, trusted CA as well.",
      "severity": "medium"
    },
    {
      "id": "V-95721",
      "title": "The on-failure container restart policy must be is set to 5 in Docker Enterprise.",
      "description": "Using the --restart flag in docker run command, specify a restart policy for how a container should or should not be restarted on exit. Choose the on-failure restart policy and limit the restart attempts to 5.\n\nIf indefinitely trying to start the container, it could possibly lead to a denial of service on the host. It could be an easy way to do a distributed denial of service attack especially if there are many containers on the same host. Additionally, ignoring the exit status of the container and always attempting to restart the container leads to non-investigation of the root cause behind containers getting terminated. If a container gets terminated, investigate on the reason behind it instead of just attempting to restart it indefinitely. Thus, it is recommended to use on-failure restart policy and limit it to maximum of 5 restart attempts.\n\nThe container would attempt to restart only for 5 times.\n\nBy default, containers are not configured with restart policies. Hence, containers do not attempt to restart of their own.",
      "severity": "medium"
    },
    {
      "id": "V-95723",
      "title": "The Docker Enterprise default ulimit must not be overwritten at runtime unless approved in the System Security Plan (SSP).",
      "description": "The default ulimit is set at the Docker daemon level. However, override the default ulimit setting, if needed, during container runtime.\n\nulimit provides control over the resources available to the shell and to processes started by it. Setting system resource limits judiciously prevents many disasters such as a fork bomb. Sometimes, even friendly users and legitimate processes can overuse system resources and in-turn can make the system unusable.\n\nThe default ulimit set at the Docker daemon level should be honored. If the default ulimit settings are not appropriate for a particular container instance, override them as an exception. But, do not make this a practice. If most of the container instances are overriding default ulimit settings, consider changing the default ulimit settings to something that is appropriate for your needs.\n\nIf the ulimits are not set properly, the desired resource control might not be achieved and might even make the system unusable.\n\nContainer instances inherit the default ulimit settings set at the Docker daemon level.",
      "severity": "medium"
    },
    {
      "id": "V-95725",
      "title": "Docker Enterprise older Universal Control Plane (UCP) and Docker Trusted Registry (DTR) images must be removed from all cluster nodes upon upgrading.",
      "description": "When upgrading either the UCP or DTR components of Docker Enterprise, the newer images are pulled (or unpacked if offline) onto Engine nodes in a cluster. Once the upgrade is complete, one must manually remove all old image version from the cluster nodes to meet the requirements of this control.\n\nWhen upgrading the Docker Engine - Enterprise component of Docker Enterprise, the old package version is automatically replaced.",
      "severity": "medium"
    },
    {
      "id": "V-95727",
      "title": "Only trusted, signed images must be stored in Docker Trusted Registry (DTR) in Docker Enterprise.",
      "description": "The Universal Control Plane (UCP) and DTR components of Docker Enterprise can be used in concert to perform an integrity check of organization-defined software at startup. In the context of Docker Enterprise, software would be analogous to Docker images that have been pulled from trusted or untrusted sources. Docker Hub is the most common upstream endpoint for retrieving Docker images. However, only \"Docker Certified\" images on Docker Hub are considered trusted and come with SLAs and trusted signatures from their respective vendors. All other images from Docker Hub or other external registries must be carefully inspected and triaged prior to use. Docker Content Trust (DCT) provides for content integrity checking mechanisms on Docker images. DCT can be combined with LDAP, DTR and UCP to enforce image signatures from users/accounts in LDAP. Therefore, to meet the requirements of this control, it is imperative that UCP has LDAP integration enabled and that content trust enforcement is enabled and properly configured.\n\nSatisfies: SRG-APP-000475, SRG-APP-000480, SRG-APP-000484, SRG-APP-000485, SRG-APP-000386",
      "severity": "medium"
    },
    {
      "id": "V-95729",
      "title": "Docker Content Trust enforcement must be enabled in Universal Control Plane (UCP).",
      "description": "The UCP and Docker Trusted Registry (DTR) components of Docker Enterprise can be used in concert with built-in audit logging capabilities to audit detected potential integrity violations per the requirements set forth by the System Security Plan (SSP).\n\nIn the context of Docker Enterprise, software would be analogous to Docker images that have been pulled from trusted or untrusted sources. Docker Hub is the most common upstream endpoint for retrieving Docker images. However, only \"Docker Certified\" images on Docker Hub are considered trusted and come with SLAs and trusted signatures from their respective vendors. All other images from Docker Hub or other external registries must be carefully inspected and triaged prior to use. Docker Content Trust (DCT) provides for content integrity checking mechanisms on Docker images. DCT can be combined with LDAP, DTR and UCP to enforce image signatures from users/accounts in LDAP. Therefore, to meet the requirements of this control, it is imperative that UCP has LDAP integration enabled and that content trust enforcement is enabled and properly configured.\n\nThe UCP and DTR components of Docker Enterprise provide audit record generation capabilities. Audit logs capture all HTTP actions for the following endpoints: Kubernetes API, Swarm API and UCP API. The following UCP API endpoints are excluded from audit logging (where \"*\" designates a wildcard of exclusions): \"/_ping\", \"/ca\", \"/auth\", \"/trustedregistryca\", \"/kubeauth\", \"/metrics\", \"/info\", \"/version*\", \"/debug\", \"/openid_keys\", \"/apidocs\", \"kubernetesdocs\" and \"/manage\". Audit log verbosity can be set to one of the following levels: \"none\", \"metadata\", or \"request\". To meet the requirements of this control, the \"request\" verbosity level must be configured in UCP.\n\nThe data captured at each level for UCP and the eNZI authentication and authorization backplane is described below:\n\n\"none\": audit logging is disabled\n\n\"metadata\":\n - method and API endpoint for the request\n - UCP user which made the request\n - response status (success/failure)\n - timestamp of the call\n - object ID of created/updated resource (for create/update calls)\n - license key\n - remote address\n\n\"request\": includes all fields from the \"metadata\" level, as well as the request payload\n\nDTR audits all events associated with repository activities. Events are considered as follows: create, get, delete, update, send, fail, and scan. The following types are associated with the defined audit events: repository, tag, blob, manifest, webhook, uri, promotion, push mirroring, poll mirroring, garbage collector, system.\n\nThe Docker Engine - Enterprise component of Docker Enterprise relies on the underlying host operating system's auditing capabilities. By default, the host OS is not configured to audit Docker Engine - Enterprise.",
      "severity": "medium"
    },
    {
      "id": "V-95731",
      "title": "Docker Swarm must have the minimum number of manager nodes.",
      "description": "Ensure that the minimum number of required manager nodes is created in a swarm.\n\nManager nodes within a swarm have control over the swarm and change its configuration modifying security parameters. Having excessive manager nodes could render the swarm more susceptible to compromise. If fault tolerance is not required in the manager nodes, a single node should be elected as a manger. If fault tolerance is required then the smallest practical odd number to achieve the appropriate level of tolerance should be configured.",
      "severity": "medium"
    },
    {
      "id": "V-95733",
      "title": "Docker Enterprise Swarm manager auto-lock key must be rotated periodically.",
      "description": "Rotate swarm manager auto-lock key periodically.\n\nSwarm manager auto-lock key is not automatically rotated. Rotate them periodically as a best practice.\n\nBy default, keys are not rotated automatically.",
      "severity": "medium"
    },
    {
      "id": "V-95735",
      "title": "Docker Enterprise node certificates must be rotated as defined in the System Security Plan (SSP).",
      "description": "Rotate swarm node certificates as appropriate.\n\nDocker Swarm uses mutual TLS for clustering operations amongst its nodes. Certificate rotation ensures that in an event such as compromised node or key, it is difficult to impersonate a node. By default, node certificates are rotated every 90 days. The user should rotate it more often or as appropriate in their environment.\n\nBy default, node certificates are rotated automatically every 90 days.",
      "severity": "medium"
    },
    {
      "id": "V-95739",
      "title": "Docker Enterprise docker.service file ownership must be set to root:root.",
      "description": "Verify that the docker.service file ownership and group-ownership are correctly set to root.\n\ndocker.service file contains sensitive parameters that may alter the behavior of Docker daemon. Hence, it should be owned and group-owned by root to maintain the integrity of the file.\n\nThis file may not be present on the system. In that case, this recommendation is not applicable. By default, if the file is present, the ownership and group-ownership for this file is correctly set to root.",
      "severity": "high"
    },
    {
      "id": "V-95741",
      "title": "Docker Enterprise docker.service file permissions must be set to 644 or more restrictive.",
      "description": "Verify that the docker.service file permissions are correctly set to 644 or more restrictive.\n\ndocker.service file contains sensitive parameters that may alter the behavior of Docker daemon. Hence, it should not be writable by any other user other than root to maintain the integrity of the file.\n\nThis file may not be present on the system. In that case, this recommendation is not applicable. By default, if the file is present, the file permissions are correctly set to 644.",
      "severity": "medium"
    },
    {
      "id": "V-95743",
      "title": "Docker Enterprise docker.socket file ownership must be set to root:root.",
      "description": "Verify that the docker.socket file ownership and group ownership is correctly set to root.\n\ndocker.socket file contains sensitive parameters that may alter the behavior of Docker remote API. Hence, it should be owned and group-owned by root to maintain the integrity of the file.\n\nThis file may not be present on the system. In that case, this recommendation is not applicable. By default, if the file is present, the ownership and group-ownership for this file is correctly set to root.",
      "severity": "high"
    },
    {
      "id": "V-95745",
      "title": "Docker Enterprise docker.socket file permissions must be set to 644 or more restrictive.",
      "description": "Verify that the docker.socket file permissions are correctly set to 644 or more restrictive.\n\ndocker.socket file contains sensitive parameters that may alter the behavior of Docker remote API. Hence, it should be writable only by root to maintain the integrity of the file.\n\nThis file may not be present on the system. In that case, this recommendation is not applicable. By default, if the file is present, the file permissions for this file are correctly set to 644.",
      "severity": "medium"
    },
    {
      "id": "V-95747",
      "title": "Docker Enterprise /etc/docker directory ownership must be set to root:root.",
      "description": "Verify that the /etc/docker directory ownership and group-ownership is correctly set to root.\n\n/etc/docker directory contains certificates and keys in addition to various sensitive files. Hence, it should be owned and group-owned by root to maintain the integrity of the directory.\n\nBy default, the ownership and group-ownership for this directory is correctly set to root.",
      "severity": "high"
    },
    {
      "id": "V-95749",
      "title": "Docker Enterprise /etc/docker directory permissions must be set to 755 or more restrictive.",
      "description": "Verify that the /etc/docker directory permissions are correctly set to 755 or more restrictive.\n\n/etc/docker directory contains certificates and keys in addition to various sensitive files. Hence, it should only be writable by root to maintain the integrity of the directory.\n\nBy default, the permissions for this directory are correctly set to 755.",
      "severity": "medium"
    },
    {
      "id": "V-95751",
      "title": "Docker Enterprise registry certificate file ownership must be set to root:root.",
      "description": "Verify that all the registry certificate files (usually found under /etc/docker/certs.d/<registry-name> directory) are owned and group-owned by root.\n\n/etc/docker/certs.d/<registry-name> directory contains Docker registry certificates. These certificate files must be owned and group-owned by root to maintain the integrity of the certificates.\n\nBy default, the ownership and group-ownership for registry certificate files is correctly set to root.",
      "severity": "high"
    },
    {
      "id": "V-95753",
      "title": "Docker Enterprise registry certificate file permissions must be set to 444 or more restrictive.",
      "description": "Verify that all the registry certificate files (usually found under /etc/docker/certs.d/<registry-name> directory) have permissions of 444 or more restrictive.\n\n/etc/docker/certs.d/<registry-name> directory contains Docker registry certificates. These certificate files must have permissions of 444 to maintain the integrity of the certificates.\n\nBy default, the permissions for registry certificate files might not be 444. The default file permissions are governed by the system or user specific umaskvalues.",
      "severity": "medium"
    },
    {
      "id": "V-95755",
      "title": "Docker Enterprise TLS certificate authority (CA) certificate file ownership must be set to root:root.",
      "description": "Verify that the TLS CA certificate file (the file that is passed along with --TLScacert parameter) is owned and group-owned by root.\n\nThe TLS CA certificate file should be protected from any tampering. It is used to authenticate Docker server based on given CA certificate. Hence, it must be owned and group-owned by root to maintain the integrity of the CA certificate.\nBy default, the ownership and group-ownership for TLS CA certificate file is correctly set to root.",
      "severity": "high"
    },
    {
      "id": "V-95757",
      "title": "Docker Enterprise TLS certificate authority (CA) certificate file permissions must be set to 444 or more restrictive.",
      "description": "Verify that the TLS CA certificate file (the file that is passed along with --TLScacert parameter) has permissions of 444 or more restrictive.\n\nThe TLS CA certificate file should be protected from any tampering. It is used to authenticate Docker server based on given CA certificate. Hence, it must have permissions of 444 to maintain the integrity of the CA certificate.\n\nBy default, the permissions for TLS CA certificate file might not be 444. The default file permissions are governed by the system or user specific umask values.",
      "severity": "medium"
    },
    {
      "id": "V-95759",
      "title": "Docker Enterprise server certificate file ownership must be set to root:root.",
      "description": "Verify that the Docker server certificate file (the file that is passed along with --TLScert parameter) is owned and group-owned by root.\n\nThe Docker server certificate file should be protected from any tampering. It is used to authenticate Docker server based on the given server certificate. Hence, it must be owned and group-owned by root to maintain the integrity of the certificate.\n\nBy default, the ownership and group-ownership for Docker server certificate file is correctly set to root.",
      "severity": "high"
    },
    {
      "id": "V-95761",
      "title": "Docker Enterprise server certificate file permissions must be set to 444 or more restrictive.",
      "description": "Verify that the Docker server certificate file (the file that is passed along with --TLScert parameter) has permissions of 444 or more restrictive.\n\nThe Docker server certificate file should be protected from any tampering. It is used to authenticate Docker server based on the given server certificate. Hence, it must have permissions of 444 to maintain the integrity of the certificate.\n\nBy default, the permissions for Docker server certificate file might not be 444. The default file permissions are governed by the system or user specific umask values.",
      "severity": "medium"
    },
    {
      "id": "V-95763",
      "title": "Docker Enterprise server certificate key file ownership must be set to root:root.",
      "description": "Verify that the Docker server certificate key file (the file that is passed along with --TLSkey parameter) is owned and group-owned by root.\n\nThe Docker server certificate key file should be protected from any tampering or unneeded reads. It holds the private key for the Docker server certificate. Hence, it must be owned and group-owned by root to maintain the integrity of the Docker server certificate.\n\nBy default, the ownership and group-ownership for Docker server certificate key file is correctly set to root.",
      "severity": "medium"
    },
    {
      "id": "V-95765",
      "title": "Docker Enterprise server certificate key file permissions must be set to 400.",
      "description": "Verify that the Docker server certificate key file (the file that is passed along with --TLSkey parameter) has permissions of 400.\n\nThe Docker server certificate key file should be protected from any tampering or unneeded reads. It holds the private key for the Docker server certificate. Hence, it must have permissions of 400 to maintain the integrity of the Docker server certificate.\n\nBy default, the permissions for Docker server certificate key file might not be 400. The default file permissions are governed by the system or user specific umask values.",
      "severity": "high"
    },
    {
      "id": "V-95767",
      "title": "Docker Enterprise socket file ownership must be set to root:docker.",
      "description": "Verify that the Docker socket file is owned by root and group-owned by docker.\n\nDocker daemon runs as root. The default UNIX socket hence must be owned by root. If any other user or process owns this socket, then it might be possible for that non-privileged user or process to interact with Docker daemon. Also, such a non-privileged user or process might interact with containers. This is neither secure nor desired behavior.\n\nAdditionally, the Docker installer creates a UNIX group called docker. Users can be added to this group, and then those users would be able to read and write to default Docker UNIX socket. The membership to the docker group is tightly controlled by the system administrator. If any other group owns this socket, then it might be possible for members of that group to interact with Docker daemon. Also, such a group might not be as tightly controlled as the docker group. This is neither secure nor desired behavior.\n\nHence, the default Docker UNIX socket file must be owned by root and group-owned by docker to maintain the integrity of the socket file.\n\nBy default, the ownership and group-ownership for Docker socket file is correctly set to root:docker.",
      "severity": "high"
    },
    {
      "id": "V-95769",
      "title": "Docker Enterprise socket file permissions must be set to 660 or more restrictive.",
      "description": "Verify that the Docker socket file has permissions of 660 or more restrictive.\n\nOnly root and members of docker group should be allowed to read and write to default Docker UNIX socket. Hence, the Docket socket file must have permissions of 660 or more restrictive.\n\nBy default, the permissions for Docker socket file is correctly set to 660.",
      "severity": "high"
    },
    {
      "id": "V-95771",
      "title": "Docker Enterprise daemon.json file ownership must be set to root:root.",
      "description": "Verify that the daemon.json file ownership and group-ownership is correctly set to root.\n\ndaemon.json file contains sensitive parameters that may alter the behavior of docker daemon. Hence, it should be owned and group-owned by root to maintain the integrity of the file.\n\nThis file may not be present on the system. In that case, this recommendation is not applicable.",
      "severity": "high"
    },
    {
      "id": "V-95773",
      "title": "Docker Enterprise daemon.json file permissions must be set to 644 or more restrictive.",
      "description": "Verify that the daemon.json file permissions are correctly set to 644 or more restrictive.\n\ndaemon.json file contains sensitive parameters that may alter the behavior of docker daemon. Hence, it should be writable only by root to maintain the integrity of the file.\n\nThis file may not be present on the system. In that case, this recommendation is not applicable.",
      "severity": "high"
    },
    {
      "id": "V-95775",
      "title": "Docker Enterprise /etc/default/docker file ownership must be set to root:root.",
      "description": "Verify that the /etc/default/docker file ownership and group-ownership is correctly set to root.\n\n/etc/default/docker file contains sensitive parameters that may alter the behavior of docker daemon. Hence, it should be owned and group-owned by root to maintain the integrity of the file.\n\nThis file may not be present on the system. In that case, this recommendation is not applicable.",
      "severity": "high"
    },
    {
      "id": "V-95777",
      "title": "Docker Enterprise /etc/default/docker file permissions must be set to 644 or more restrictive.",
      "description": "Verify that the /etc/default/docker file permissions are correctly set to 644 or more restrictive.\n\n/etc/default/docker file contains sensitive parameters that may alter the behavior of docker daemon. Hence, it should be writable only by root to maintain the integrity of the file.\n\nThis file may not be present on the system. In that case, this recommendation is not applicable.",
      "severity": "high"
    },
    {
      "id": "V-95779",
      "title": "Docker Enterprise Universal Control Plane (UCP) must be integrated with a trusted certificate authority (CA).",
      "description": "When integrating the UCP and Docker Trusted Registry (DTR) management consoles with an external, trusted certificate authority (CA), both UCP and DTR will validate these certificate chains per the requirements set forth by the System Security Plan (SSP).\n\nUCP establishes mutual TLS authentication for all Engine - Enterprise nodes in a cluster using a built-in certificate authority which inherently meets the requirements of this control. This is described below.\n\nThe UCP component of Docker Enterprise includes a built-in public key infrastructure (PKI) system. When a UCP cluster is initialized, the first node designates itself as a manager node. That node subsequently generates a new root CA along with a key pair, which are used to secure communications with other UCP manager and worker nodes that are joined to the cluster. One can also specify his/her own externally-generated root CA upon initialization of a UCP cluster. The manager node also generates two tokens to use when joining additional nodes to the cluster: one worker token and one manager token. Each token includes the digest of the root CAâ€™s certificate and a randomly generated secret. When a node joins the cluster, the joining node uses the digest to validate the root CA certificate from the remote manager. The remote manager uses the secret to ensure the joining node is an approved node. Each time a new node joins the cluster, the manager issues a certificate to the node. The certificate contains a randomly generated node ID to identify the node under the certificate common name (CN) and the role under the organizational unit (OU). The node ID serves as the cryptographically secure node identity for the lifetime of the node in the current UCP cluster. In this mutual TLS architecture, all nodes encrypt communications using a minimum of TLS 1.2. This information can also be referenced at https://docs.docker.com/engine/swarm/how-swarm-mode-works/pki/.",
      "severity": "medium"
    },
    {
      "id": "V-95781",
      "title": "Docker Enterprise data exchanged between Linux containers on different nodes must be encrypted on the overlay network.",
      "description": "Encrypt data exchanged between containers on different nodes on the overlay network.\n\nBy default, data exchanged between containers on different nodes on the overlay network is not encrypted. This could potentially expose traffic between the container nodes.",
      "severity": "medium"
    },
    {
      "id": "V-95783",
      "title": "Docker Enterprise Swarm services must be bound to a specific host interface.",
      "description": "By default, the docker swarm services will listen to all interfaces on the host, which may not be necessary for the operation of the swarm where the host has multiple network interfaces.\n\nWhen a swarm is initialized the default value for the --listen-addr flag is 0.0.0.0:2377 which means that the swarm services will listen on all interfaces on the host. If a host has multiple network interfaces this may be undesirable as it may expose the docker swarm services to networks which are not involved in the operation of the swarm.\n\nBy passing a specific IP address to the --listen-addr, a specific network interface can be specified limiting this exposure.",
      "severity": "medium"
    },
    {
      "id": "V-95785",
      "title": "Docker Enterprise Universal Control Plane (UCP) must be configured to use TLS 1.2.",
      "description": "By default docker UCP is configured to use TLS v1.2, if this setting is misconfigured, older protocols containing security weaknesses could be utilized. TLS requires a handshake between client and server which is where the TLS version utilized in the connection is negotiated. For DoD use cases, all TLS must be at version 1.2.",
      "severity": "medium"
    },
    {
      "id": "V-96003",
      "title": "Docker Enterprise Swarm manager must be run in auto-lock mode.",
      "description": "Run Docker swarm manager in auto-lock mode.\n\nWhen Docker restarts, both the TLS key used to encrypt communication among swarm nodes, and the key used to encrypt and decrypt Raft logs on disk, are loaded into each manager node's memory. Protect the mutual TLS encryption key and the key used to encrypt and decrypt Raft logs at rest. This protection could be enabled by initializing swarm with --autolock flag.\n\nWith --autolock enabled, when Docker restarts, unlock the swarm first, using a key encryption key generated by Docker when the swarm was initialized.",
      "severity": "medium"
    }
  ]
}